<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Storage.Queues</name>
    </assembly>
    <members>
        <member name="P:Azure.Storage.Queues.MessageIdDeleteHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.MessageIdRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.MessageIdRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String)">
            <summary> Initializes a new instance of MessageIdRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="url"> The URL of the service account, queue or message that is the target of the desired operation. </param>
            <param name="version"> Specifies the version of the operation to use for this request. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="url" /> or <paramref name="version" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.MessageIdRestClient.UpdateAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},Azure.Storage.Queues.Models.QueueMessage,System.Threading.CancellationToken)">
            <summary> The Update operation was introduced with version 2011-08-18 of the Queue service API. The Update Message operation updates the visibility timeout of a message. You can also use this operation to update the contents of a message. A message must be in a format that can be included in an XML request with UTF-8 encoding, and the encoded message can be up to 64KB in size. </summary>
            <param name="messageid"> The container name. </param>
            <param name="popReceipt"> Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation. </param>
            <param name="visibilitytimeout"> Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The default value is 30 seconds. A specified value must be larger than or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value later than the expiry time. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="queueMessage"> A Message object which can be stored in a Queue. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="messageid" /> or <paramref name="popReceipt" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.MessageIdRestClient.Update(System.String,System.String,System.Int32,System.Nullable{System.Int32},Azure.Storage.Queues.Models.QueueMessage,System.Threading.CancellationToken)">
            <summary> The Update operation was introduced with version 2011-08-18 of the Queue service API. The Update Message operation updates the visibility timeout of a message. You can also use this operation to update the contents of a message. A message must be in a format that can be included in an XML request with UTF-8 encoding, and the encoded message can be up to 64KB in size. </summary>
            <param name="messageid"> The container name. </param>
            <param name="popReceipt"> Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation. </param>
            <param name="visibilitytimeout"> Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The default value is 30 seconds. A specified value must be larger than or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value later than the expiry time. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="queueMessage"> A Message object which can be stored in a Queue. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="messageid" /> or <paramref name="popReceipt" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.MessageIdRestClient.DeleteAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Delete operation deletes the specified message. </summary>
            <param name="messageid"> The container name. </param>
            <param name="popReceipt"> Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="messageid" /> or <paramref name="popReceipt" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.MessageIdRestClient.Delete(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Delete operation deletes the specified message. </summary>
            <param name="messageid"> The container name. </param>
            <param name="popReceipt"> Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="messageid" /> or <paramref name="popReceipt" /> is null. </exception>
        </member>
        <member name="P:Azure.Storage.Queues.MessageIdUpdateHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.MessageIdUpdateHeaders.PopReceipt">
            <summary> The pop receipt of the queue message. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.MessageIdUpdateHeaders.TimeNextVisible">
            <summary> A UTC date/time value that represents when the message will be visible on the queue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.MessagesClearHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.MessagesDequeueHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.MessagesEnqueueHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.MessagesPeekHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.MessagesRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String)">
            <summary> Initializes a new instance of MessagesRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="url"> The URL of the service account, queue or message that is the target of the desired operation. </param>
            <param name="version"> Specifies the version of the operation to use for this request. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="url" /> or <paramref name="version" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.DequeueAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Dequeue operation retrieves one or more messages from the front of the queue. </summary>
            <param name="numberOfMessages"> Optional. A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation. </param>
            <param name="visibilitytimeout"> Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The default value is 30 seconds. A specified value must be larger than or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value later than the expiry time. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.Dequeue(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Dequeue operation retrieves one or more messages from the front of the queue. </summary>
            <param name="numberOfMessages"> Optional. A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation. </param>
            <param name="visibilitytimeout"> Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The default value is 30 seconds. A specified value must be larger than or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value later than the expiry time. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.ClearAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Clear operation deletes all messages from the specified queue. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.Clear(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Clear operation deletes all messages from the specified queue. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.EnqueueAsync(Azure.Storage.Queues.Models.QueueMessage,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Enqueue operation adds a new message to the back of the message queue. A visibility timeout can also be specified to make the message invisible until the visibility timeout expires. A message must be in a format that can be included in an XML request with UTF-8 encoding. The encoded message can be up to 64 KB in size for versions 2011-08-18 and newer, or 8 KB in size for previous versions. </summary>
            <param name="queueMessage"> A Message object which can be stored in a Queue. </param>
            <param name="visibilitytimeout"> Optional. If specified, the request must be made using an x-ms-version of 2011-08-18 or later. If not specified, the default value is 0. Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. visibilitytimeout should be set to a value smaller than the time-to-live value. </param>
            <param name="messageTimeToLive"> Optional. Specifies the time-to-live interval for the message, in seconds. Prior to version 2017-07-29, the maximum time-to-live allowed is 7 days. For version 2017-07-29 or later, the maximum time-to-live can be any positive number, as well as -1 indicating that the message does not expire. If this parameter is omitted, the default time-to-live is 7 days. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queueMessage" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.Enqueue(Azure.Storage.Queues.Models.QueueMessage,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Enqueue operation adds a new message to the back of the message queue. A visibility timeout can also be specified to make the message invisible until the visibility timeout expires. A message must be in a format that can be included in an XML request with UTF-8 encoding. The encoded message can be up to 64 KB in size for versions 2011-08-18 and newer, or 8 KB in size for previous versions. </summary>
            <param name="queueMessage"> A Message object which can be stored in a Queue. </param>
            <param name="visibilitytimeout"> Optional. If specified, the request must be made using an x-ms-version of 2011-08-18 or later. If not specified, the default value is 0. Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. visibilitytimeout should be set to a value smaller than the time-to-live value. </param>
            <param name="messageTimeToLive"> Optional. Specifies the time-to-live interval for the message, in seconds. Prior to version 2017-07-29, the maximum time-to-live allowed is 7 days. For version 2017-07-29 or later, the maximum time-to-live can be any positive number, as well as -1 indicating that the message does not expire. If this parameter is omitted, the default time-to-live is 7 days. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queueMessage" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.PeekAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Peek operation retrieves one or more messages from the front of the queue, but does not alter the visibility of the message. </summary>
            <param name="numberOfMessages"> Optional. A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.MessagesRestClient.Peek(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The Peek operation retrieves one or more messages from the front of the queue, but does not alter the visibility of the message. </summary>
            <param name="numberOfMessages"> Optional. A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.Storage.Queues.Models.DequeuedMessageItem">
            <summary> The object returned in the QueueMessageList array when calling Get Messages on a Queue. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.DequeuedMessageItem.#ctor(System.String,System.DateTimeOffset,System.DateTimeOffset,System.String,System.DateTimeOffset,System.Int64,System.String)">
            <summary> Initializes a new instance of DequeuedMessageItem. </summary>
            <param name="messageId"> The Id of the Message. </param>
            <param name="insertionTime"> The time the Message was inserted into the Queue. </param>
            <param name="expirationTime"> The time that the Message will expire and be automatically deleted. </param>
            <param name="popReceipt"> This value is required to delete the Message. If deletion fails using this popreceipt then the message has been dequeued by another client. </param>
            <param name="timeNextVisible"> The time that the message will again become visible in the Queue. </param>
            <param name="dequeueCount"> The number of times the message has been dequeued. </param>
            <param name="messageText"> The content of the Message. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="messageId" />, <paramref name="popReceipt" /> or <paramref name="messageText" /> is null. </exception>
        </member>
        <member name="P:Azure.Storage.Queues.Models.DequeuedMessageItem.MessageId">
            <summary> The Id of the Message. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.DequeuedMessageItem.InsertionTime">
            <summary> The time the Message was inserted into the Queue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.DequeuedMessageItem.ExpirationTime">
            <summary> The time that the Message will expire and be automatically deleted. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.DequeuedMessageItem.PopReceipt">
            <summary> This value is required to delete the Message. If deletion fails using this popreceipt then the message has been dequeued by another client. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.DequeuedMessageItem.TimeNextVisible">
            <summary> The time that the message will again become visible in the Queue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.DequeuedMessageItem.DequeueCount">
            <summary> The number of times the message has been dequeued. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.DequeuedMessageItem.MessageText">
            <summary> The content of the Message. </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.ListQueuesSegmentResponse">
            <summary> The object returned when calling List Queues on a Queue Service. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.ListQueuesSegmentResponse.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary> Initializes a new instance of ListQueuesSegmentResponse. </summary>
            <param name="serviceEndpoint"></param>
            <param name="prefix"></param>
            <param name="maxResults"></param>
            <param name="nextMarker"></param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="serviceEndpoint" />, <paramref name="prefix" /> or <paramref name="nextMarker" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.Models.ListQueuesSegmentResponse.#ctor(System.String,System.String,System.String,System.Int32,System.Collections.Generic.IReadOnlyList{Azure.Storage.Queues.Models.QueueItem},System.String)">
            <summary> Initializes a new instance of ListQueuesSegmentResponse. </summary>
            <param name="serviceEndpoint"></param>
            <param name="prefix"></param>
            <param name="marker"></param>
            <param name="maxResults"></param>
            <param name="queueItems"></param>
            <param name="nextMarker"></param>
        </member>
        <member name="P:Azure.Storage.Queues.Models.ListQueuesSegmentResponse.ServiceEndpoint">
            <summary> Gets the service endpoint. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.ListQueuesSegmentResponse.Prefix">
            <summary> Gets the prefix. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.ListQueuesSegmentResponse.Marker">
            <summary> Gets the marker. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.ListQueuesSegmentResponse.MaxResults">
            <summary> Gets the max results. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.ListQueuesSegmentResponse.QueueItems">
            <summary> Gets the queue items. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.ListQueuesSegmentResponse.NextMarker">
            <summary> Gets the next marker. </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.PeekedMessageItem">
            <summary> The object returned in the QueueMessageList array when calling Peek Messages on a Queue. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.PeekedMessageItem.#ctor(System.String,System.DateTimeOffset,System.DateTimeOffset,System.Int64,System.String)">
            <summary> Initializes a new instance of PeekedMessageItem. </summary>
            <param name="messageId"> The Id of the Message. </param>
            <param name="insertionTime"> The time the Message was inserted into the Queue. </param>
            <param name="expirationTime"> The time that the Message will expire and be automatically deleted. </param>
            <param name="dequeueCount"> The number of times the message has been dequeued. </param>
            <param name="messageText"> The content of the Message. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="messageId" /> or <paramref name="messageText" /> is null. </exception>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessageItem.MessageId">
            <summary> The Id of the Message. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessageItem.InsertionTime">
            <summary> The time the Message was inserted into the Queue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessageItem.ExpirationTime">
            <summary> The time that the Message will expire and be automatically deleted. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessageItem.DequeueCount">
            <summary> The number of times the message has been dequeued. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessageItem.MessageText">
            <summary> The content of the Message. </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueAccessPolicy">
            <summary> An Access policy. </summary>
            <summary>
            QueueAccessPolicy.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueAccessPolicy.#ctor">
            <summary> Initializes a new instance of QueueAccessPolicy. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueAccessPolicy.#ctor(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)">
            <summary> Initializes a new instance of QueueAccessPolicy. </summary>
            <param name="startsOn"> the date-time the policy is active. </param>
            <param name="expiresOn"> the date-time the policy expires. </param>
            <param name="permissions"> the permissions for the acl policy. </param>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueAccessPolicy.StartsOn">
            <summary>
            The DateTimeOffset when the policy becomes active.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueAccessPolicy.ExpiresOn">
            <summary>
            The DateTimeOffset when the policy expires.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueAccessPolicy.Permissions">
            <summary>
            The permissions for the acl policy.
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueAnalyticsLogging">
            <summary> Azure Analytics Logging settings. </summary>
            <summary>
            QueueServiceStatistics.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueAnalyticsLogging.Version">
            <summary> The version of Storage Analytics to configure. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueAnalyticsLogging.Delete">
            <summary> Indicates whether all delete requests should be logged. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueAnalyticsLogging.Read">
            <summary> Indicates whether all read requests should be logged. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueAnalyticsLogging.Write">
            <summary> Indicates whether all write requests should be logged. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueAnalyticsLogging.RetentionPolicy">
            <summary> the retention policy. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueAnalyticsLogging.#ctor">
            <summary>
            Creates a new QueueAnalyticsLogging instance
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueAnalyticsLogging.#ctor(System.Boolean)">
            <summary>
            Creates a new QueueAnalyticsLogging instance
            </summary>
            <param name="skipInitialization">Whether to skip initializing nested objects.</param>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueCorsRule">
            <summary> CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. </summary>
            <summary>
            QueueCorsRule.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueCorsRule.AllowedOrigins">
            <summary> The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests via CORS. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueCorsRule.AllowedMethods">
            <summary> The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated). </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueCorsRule.AllowedHeaders">
            <summary> the request headers that the origin domain may specify on the CORS request. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueCorsRule.ExposedHeaders">
            <summary> The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueCorsRule.MaxAgeInSeconds">
            <summary> The maximum amount time that a browser should cache the preflight OPTIONS request. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueCorsRule.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueErrorCode">
            <summary> Error codes returned by the service. </summary>
            <summary>
            QueueErrorCode.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueErrorCode.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Storage.Queues.Models.QueueErrorCode" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AccountAlreadyExists">
            <summary> AccountAlreadyExists. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AccountBeingCreated">
            <summary> AccountBeingCreated. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AccountIsDisabled">
            <summary> AccountIsDisabled. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AuthenticationFailed">
            <summary> AuthenticationFailed. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AuthorizationFailure">
            <summary> AuthorizationFailure. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.ConditionHeadersNotSupported">
            <summary> ConditionHeadersNotSupported. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.ConditionNotMet">
            <summary> ConditionNotMet. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.EmptyMetadataKey">
            <summary> EmptyMetadataKey. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InsufficientAccountPermissions">
            <summary> InsufficientAccountPermissions. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InternalError">
            <summary> InternalError. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidAuthenticationInfo">
            <summary> InvalidAuthenticationInfo. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidHeaderValue">
            <summary> InvalidHeaderValue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidHttpVerb">
            <summary> InvalidHttpVerb. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidInput">
            <summary> InvalidInput. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidMd5">
            <summary> InvalidMd5. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidMetadata">
            <summary> InvalidMetadata. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidQueryParameterValue">
            <summary> InvalidQueryParameterValue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidRange">
            <summary> InvalidRange. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidResourceName">
            <summary> InvalidResourceName. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidUri">
            <summary> InvalidUri. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidXmlDocument">
            <summary> InvalidXmlDocument. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidXmlNodeValue">
            <summary> InvalidXmlNodeValue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.Md5Mismatch">
            <summary> Md5Mismatch. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.MetadataTooLarge">
            <summary> MetadataTooLarge. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.MissingContentLengthHeader">
            <summary> MissingContentLengthHeader. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.MissingRequiredQueryParameter">
            <summary> MissingRequiredQueryParameter. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.MissingRequiredHeader">
            <summary> MissingRequiredHeader. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.MissingRequiredXmlNode">
            <summary> MissingRequiredXmlNode. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.MultipleConditionHeadersNotSupported">
            <summary> MultipleConditionHeadersNotSupported. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.OperationTimedOut">
            <summary> OperationTimedOut. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.OutOfRangeInput">
            <summary> OutOfRangeInput. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.OutOfRangeQueryParameterValue">
            <summary> OutOfRangeQueryParameterValue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.RequestBodyTooLarge">
            <summary> RequestBodyTooLarge. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.ResourceTypeMismatch">
            <summary> ResourceTypeMismatch. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.RequestUrlFailedToParse">
            <summary> RequestUrlFailedToParse. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.ResourceAlreadyExists">
            <summary> ResourceAlreadyExists. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.ResourceNotFound">
            <summary> ResourceNotFound. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.ServerBusy">
            <summary> ServerBusy. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.UnsupportedHeader">
            <summary> UnsupportedHeader. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.UnsupportedXmlNode">
            <summary> UnsupportedXmlNode. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.UnsupportedQueryParameter">
            <summary> UnsupportedQueryParameter. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.UnsupportedHttpVerb">
            <summary> UnsupportedHttpVerb. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.InvalidMarker">
            <summary> InvalidMarker. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.MessageNotFound">
            <summary> MessageNotFound. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.MessageTooLarge">
            <summary> MessageTooLarge. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.PopReceiptMismatch">
            <summary> PopReceiptMismatch. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.QueueAlreadyExists">
            <summary> QueueAlreadyExists. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.QueueBeingDeleted">
            <summary> QueueBeingDeleted. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.QueueDisabled">
            <summary> QueueDisabled. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.QueueNotEmpty">
            <summary> QueueNotEmpty. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.QueueNotFound">
            <summary> QueueNotFound. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AuthorizationSourceIPMismatch">
            <summary> AuthorizationSourceIPMismatch. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AuthorizationProtocolMismatch">
            <summary> AuthorizationProtocolMismatch. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AuthorizationPermissionMismatch">
            <summary> AuthorizationPermissionMismatch. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AuthorizationServiceMismatch">
            <summary> AuthorizationServiceMismatch. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.AuthorizationResourceTypeMismatch">
            <summary> AuthorizationResourceTypeMismatch. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueErrorCode.FeatureVersionMismatch">
            <summary> FeatureVersionMismatch. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueErrorCode.op_Equality(Azure.Storage.Queues.Models.QueueErrorCode,Azure.Storage.Queues.Models.QueueErrorCode)">
            <summary> Determines if two <see cref="T:Azure.Storage.Queues.Models.QueueErrorCode" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueErrorCode.op_Inequality(Azure.Storage.Queues.Models.QueueErrorCode,Azure.Storage.Queues.Models.QueueErrorCode)">
            <summary> Determines if two <see cref="T:Azure.Storage.Queues.Models.QueueErrorCode" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueErrorCode.op_Implicit(System.String)~Azure.Storage.Queues.Models.QueueErrorCode">
            <summary> Converts a string to a <see cref="T:Azure.Storage.Queues.Models.QueueErrorCode" />. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueErrorCode.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueErrorCode.Equals(Azure.Storage.Queues.Models.QueueErrorCode)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueErrorCode.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueErrorCode.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueGeoReplication">
            <summary> The GeoReplication. </summary>
            <summary>
            QueueGeoReplication.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueGeoReplication.#ctor(Azure.Storage.Queues.Models.QueueGeoReplicationStatus,System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of QueueGeoReplication. </summary>
            <param name="status"> The status of the secondary location. </param>
            <param name="lastSyncedOn"> A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or may not be available for reads. </param>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueGeoReplication.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueGeoReplication.LastSyncedOn">
            <summary>
            A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary.
            Primary writes after this point in time may or may not be available for reads.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueGeoReplication.Status">
            <summary> The status of the secondary location. </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueGeoReplicationStatus">
            <summary> The status of the secondary location. </summary>
        </member>
        <member name="F:Azure.Storage.Queues.Models.QueueGeoReplicationStatus.Live">
            <summary> live. </summary>
        </member>
        <member name="F:Azure.Storage.Queues.Models.QueueGeoReplicationStatus.Bootstrap">
            <summary> bootstrap. </summary>
        </member>
        <member name="F:Azure.Storage.Queues.Models.QueueGeoReplicationStatus.Unavailable">
            <summary> unavailable. </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueItem">
            <summary> An Azure Storage Queue. </summary>
            <summary>
            QueueItem.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueItem.#ctor(System.String)">
            <summary> Initializes a new instance of QueueItem. </summary>
            <param name="name"> The name of the Queue. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueItem.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> Initializes a new instance of QueueItem. </summary>
            <param name="name"> The name of the Queue. </param>
            <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueItem.Name">
            <summary>
            The name of the Queue.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueItem.Metadata">
            <summary>
            Metadata
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueMessage">
            <summary> A Message object which can be stored in a Queue. </summary>
            <summary>
            The object returned in the QueueMessageList array when calling Get
            Messages on a Queue.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMessage.MessageId">
            <summary>
            The Id of the Message.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMessage.PopReceipt">
            <summary>
            This value is required to delete the Message. If deletion fails using this popreceipt then the message has been dequeued by another client.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMessage.MessageText">
            <summary>
            The content of the Message.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMessage.Body">
            <summary>
            The content of the Message.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMessage.NextVisibleOn">
            <summary>
            The time that the message will again become visible in the Queue.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMessage.InsertedOn">
            <summary>
            The time the Message was inserted into the Queue.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMessage.ExpiresOn">
            <summary>
            The time that the Message will expire and be automatically deleted.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMessage.DequeueCount">
            <summary>
            The number of times the message has been dequeued.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueMessage.Update(Azure.Storage.Queues.Models.UpdateReceipt)">
            <summary>
            Update a <see cref="T:Azure.Storage.Queues.Models.UpdateReceipt" /> after calling
            <see cref="M:Azure.Storage.Queues.QueueClient.UpdateMessageAsync(System.String,System.String,System.BinaryData,System.TimeSpan,System.Threading.CancellationToken)" /> with the resulting
            <see cref="T:Azure.Storage.Queues.Models.UpdateReceipt" />.
            </summary>
            <param name="updated">The message details.</param>
            <returns>The updated <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />.</returns>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueMetrics">
            <summary> a summary of request statistics grouped by API in hour or minute aggregates for queues. </summary>
            <summary>
            QueueMetrics.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueMetrics.#ctor(System.String,System.Boolean,System.Nullable{System.Boolean},Azure.Storage.Queues.Models.QueueRetentionPolicy)">
            <summary> Initializes a new instance of QueueMetrics. </summary>
            <param name="version"> The version of Storage Analytics to configure. </param>
            <param name="enabled"> Indicates whether metrics are enabled for the Queue service. </param>
            <param name="includeApis"> Indicates whether metrics should generate summary statistics for called API operations. </param>
            <param name="retentionPolicy"> the retention policy. </param>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMetrics.Version">
            <summary> The version of Storage Analytics to configure. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMetrics.Enabled">
            <summary> Indicates whether metrics are enabled for the Queue service. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMetrics.RetentionPolicy">
            <summary> the retention policy. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueMetrics.IncludeApis">
            <summary>
            Indicates whether metrics should generate summary statistics for called API operations.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueMetrics.#ctor">
            <summary>
            Creates a new QueueMetrics instance
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueMetrics.#ctor(System.Boolean)">
            <summary>
            Creates a new QueueMetrics instance
            </summary>
            <param name="skipInitialization">Whether to skip initializing nested objects.</param>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueRetentionPolicy">
            <summary> the retention policy. </summary>
            <summary>
            QueueRetentionPolicy.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueRetentionPolicy.#ctor(System.Boolean,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of QueueRetentionPolicy. </summary>
            <param name="enabled"> Indicates whether a retention policy is enabled for the storage service. </param>
            <param name="days"> Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted. </param>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueRetentionPolicy.Enabled">
            <summary> Indicates whether a retention policy is enabled for the storage service. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueRetentionPolicy.Days">
            <summary> Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueRetentionPolicy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueServiceProperties">
            <summary> Storage Service Properties. </summary>
            <summary>
            QueueServiceProperties.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueServiceProperties.#ctor(Azure.Storage.Queues.Models.QueueAnalyticsLogging,Azure.Storage.Queues.Models.QueueMetrics,Azure.Storage.Queues.Models.QueueMetrics,System.Collections.Generic.IList{Azure.Storage.Queues.Models.QueueCorsRule})">
            <summary> Initializes a new instance of QueueServiceProperties. </summary>
            <param name="logging"> Azure Analytics Logging settings. </param>
            <param name="hourMetrics"> A summary of request statistics grouped by API in hourly aggregates for queues. </param>
            <param name="minuteMetrics"> a summary of request statistics grouped by API in minute aggregates for queues. </param>
            <param name="cors"> The set of CORS rules. </param>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueServiceProperties.Logging">
            <summary> Azure Analytics Logging settings. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueServiceProperties.HourMetrics">
            <summary> A summary of request statistics grouped by API in hourly aggregates for queues. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueServiceProperties.MinuteMetrics">
            <summary> a summary of request statistics grouped by API in minute aggregates for queues. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueServiceProperties.Cors">
            <summary>
            The set of CORS rules.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueServiceProperties.#ctor">
            <summary>
            Creates a new QueueServiceProperties instance.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueServiceProperties.#ctor(System.Boolean)">
            <summary>
            Creates a new QueueServiceProperties instance.
            </summary>
            <param name="skipInitialization">Whether to skip initializing nested objects.</param>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueServiceStatistics">
            <summary> Stats for the storage service. </summary>
            <summary>
            QueueServiceStatistics.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueServiceStatistics.#ctor">
            <summary> Initializes a new instance of QueueServiceStatistics. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueServiceStatistics.#ctor(Azure.Storage.Queues.Models.QueueGeoReplication)">
            <summary> Initializes a new instance of QueueServiceStatistics. </summary>
            <param name="geoReplication"> Geo-Replication information for the Secondary Storage Service. </param>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueServiceStatistics.GeoReplication">
            <summary>
            GeoReplication
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueSignedIdentifier">
            <summary> signed identifier. </summary>
            <summary>
            QueueSignedIdentifier.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueSignedIdentifier.Id">
            <summary> a unique id. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueSignedIdentifier.AccessPolicy">
            <summary> The access policy. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueSignedIdentifier.#ctor">
            <summary>
            Creates a new QueueSignedIdentifier instance.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueSignedIdentifier.#ctor(System.Boolean)">
            <summary>
            Creates a new QueueSignedIdentifier instance.
            </summary>
            <param name="skipInitialization">Whether to skip initializing nested objects.</param>
        </member>
        <member name="T:Azure.Storage.Queues.Models.SendReceipt">
            <summary> The object returned in the QueueMessageList array when calling Put Message on a Queue. </summary>
            <summary>
            SendReceipt.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.SendReceipt.#ctor(System.String,System.DateTimeOffset,System.DateTimeOffset,System.String,System.DateTimeOffset)">
            <summary> Initializes a new instance of SendReceipt. </summary>
            <param name="messageId"> The Id of the Message. </param>
            <param name="insertionTime"> The time the Message was inserted into the Queue. </param>
            <param name="expirationTime"> The time that the Message will expire and be automatically deleted. </param>
            <param name="popReceipt"> This value is required to delete the Message. If deletion fails using this popreceipt then the message has been dequeued by another client. </param>
            <param name="timeNextVisible"> The time that the message will again become visible in the Queue. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="messageId" /> or <paramref name="popReceipt" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.Models.SendReceipt.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.SendReceipt.MessageId">
            <summary> The Id of the Message. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.SendReceipt.InsertionTime">
            <summary> The time the Message was inserted into the Queue. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.SendReceipt.ExpirationTime">
            <summary> The time that the Message will expire and be automatically deleted. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.SendReceipt.PopReceipt">
            <summary> This value is required to delete the Message. If deletion fails using this popreceipt then the message has been dequeued by another client. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.SendReceipt.TimeNextVisible">
            <summary> The time that the message will again become visible in the Queue. </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.StorageError">
            <summary> The StorageError. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.StorageError.#ctor">
            <summary> Initializes a new instance of StorageError. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.StorageError.#ctor(System.String)">
            <summary> Initializes a new instance of StorageError. </summary>
            <param name="message"></param>
        </member>
        <member name="P:Azure.Storage.Queues.Models.StorageError.Message">
            <summary> Gets the message. </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueuesModelFactory">
            <summary> Model factory for read-only models. </summary>
            <summary>
            QueuesModelFactory provides utilities for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.QueueMessage(System.String,System.String,System.String,System.Int64,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new QueueMessage instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.QueueMessage(System.String,System.String,System.BinaryData,System.Int64,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new QueueMessage instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.PeekedMessage(System.String,System.String,System.Int64,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new PeekedMessage instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.PeekedMessage(System.String,System.BinaryData,System.Int64,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new PeekedMessage instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.QueueItem(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new QueueItem instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.QueueProperties(System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Creates a new QueueProperties instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.QueueServiceStatistics(Azure.Storage.Queues.Models.QueueGeoReplication)">
            <summary>
            Creates a new QueueServiceStatistics instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.UpdateReceipt(System.String,System.DateTimeOffset)">
            <summary>
            Creates a new UpdateReceipt instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.SendReceipt(System.String,System.DateTimeOffset,System.DateTimeOffset,System.String,System.DateTimeOffset)">
            <summary>
            Creates a new SendReceipt instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueuesModelFactory.QueueGeoReplication(Azure.Storage.Queues.Models.QueueGeoReplicationStatus,System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new QueueGeoReplication instance for mocking.
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.PeekedMessage">
            <summary>
            The object returned in the QueueMessageList array when calling Peek Messages on a Queue
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessage.MessageId">
            <summary>
            The Id of the Message.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessage.MessageText">
            <summary>
            The content of the Message.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessage.Body">
            <summary>
            The content of the Message.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessage.InsertedOn">
            <summary>
            The time the Message was inserted into the Queue.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessage.ExpiresOn">
            <summary>
            The time that the Message will expire and be automatically deleted.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.PeekedMessage.DequeueCount">
            <summary>
            The number of times the message has been dequeued.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.PeekedMessage.#ctor">
            <summary>
            Prevent direct instantiation of PeekedMessage instances.
            You can use QueuesModelFactory.PeekedMessage instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueProperties">
            <summary>
            QueueProperties.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueProperties.Metadata">
            <summary>
            Metadata.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.QueueProperties.ApproximateMessagesCount">
            <summary>
            The approximate number of messages in the queue. This number is not lower than the actual number of messages in the queue, but could be higher.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Models.QueueProperties.#ctor">
            <summary>
            Creates a new QueueProperties instance
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueTraits">
            <summary>
            Specifies options for listing queues with the
            <see cref="M:Azure.Storage.Queues.QueueServiceClient.GetQueuesAsync(Azure.Storage.Queues.Models.QueueTraits,System.String,System.Threading.CancellationToken)" /> operation.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.Models.QueueTraits.None">
            <summary>
            Flag specifying only the default information for queues
            should be included.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.Models.QueueTraits.Metadata">
            <summary>
            Flag specifying that the queue's metadata should be
            included.
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.QueueExtensions">
            <summary>
            QueueTraits enum methods
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Models.UpdateReceipt">
            <summary>
            UpdateReceipt
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.UpdateReceipt.NextVisibleOn">
            <summary>
            A UTC date/time value that represents when the message will be visible on the queue.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Models.UpdateReceipt.PopReceipt">
            <summary>
            The pop receipt of the queue message.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueCreateHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueDeleteHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueGetAccessPolicyHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueGetPropertiesHeaders.ApproximateMessagesCount">
            <summary> The approximate number of messages in the queue. This number is not lower than the actual number of messages in the queue, but could be higher. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueGetPropertiesHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String)">
            <summary> Initializes a new instance of QueueRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="url"> The URL of the service account, queue or message that is the target of the desired operation. </param>
            <param name="version"> Specifies the version of the operation to use for this request. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="url" /> or <paramref name="version" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.CreateAsync(System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> creates a new queue under the given account. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="metadata"> Optional. Include this parameter to specify that the queue's metadata be returned as part of the response body. Note that metadata requested with this parameter must be stored in accordance with the naming restrictions imposed by the 2009-09-19 version of the Queue service. Beginning with this version, all metadata names must adhere to the naming conventions for C# identifiers. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.Create(System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> creates a new queue under the given account. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="metadata"> Optional. Include this parameter to specify that the queue's metadata be returned as part of the response body. Note that metadata requested with this parameter must be stored in accordance with the naming restrictions imposed by the 2009-09-19 version of the Queue service. Beginning with this version, all metadata names must adhere to the naming conventions for C# identifiers. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.DeleteAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> operation permanently deletes the specified queue. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.Delete(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> operation permanently deletes the specified queue. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.GetPropertiesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Retrieves user-defined metadata and queue properties on the specified queue. Metadata is associated with the queue as name-values pairs. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.GetProperties(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Retrieves user-defined metadata and queue properties on the specified queue. Metadata is associated with the queue as name-values pairs. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.SetMetadataAsync(System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> sets user-defined metadata on the specified queue. Metadata is associated with the queue as name-value pairs. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="metadata"> Optional. Include this parameter to specify that the queue's metadata be returned as part of the response body. Note that metadata requested with this parameter must be stored in accordance with the naming restrictions imposed by the 2009-09-19 version of the Queue service. Beginning with this version, all metadata names must adhere to the naming conventions for C# identifiers. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.SetMetadata(System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> sets user-defined metadata on the specified queue. Metadata is associated with the queue as name-value pairs. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="metadata"> Optional. Include this parameter to specify that the queue's metadata be returned as part of the response body. Note that metadata requested with this parameter must be stored in accordance with the naming restrictions imposed by the 2009-09-19 version of the Queue service. Beginning with this version, all metadata names must adhere to the naming conventions for C# identifiers. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.GetAccessPolicyAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> returns details about any stored access policies specified on the queue that may be used with Shared Access Signatures. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.GetAccessPolicy(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> returns details about any stored access policies specified on the queue that may be used with Shared Access Signatures. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.SetAccessPolicyAsync(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Azure.Storage.Queues.Models.QueueSignedIdentifier},System.Threading.CancellationToken)">
            <summary> sets stored access policies for the queue that may be used with Shared Access Signatures. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="queueAcl"> the acls for the queue. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueRestClient.SetAccessPolicy(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Azure.Storage.Queues.Models.QueueSignedIdentifier},System.Threading.CancellationToken)">
            <summary> sets stored access policies for the queue that may be used with Shared Access Signatures. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="queueAcl"> the acls for the queue. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="P:Azure.Storage.Queues.QueueSetAccessPolicyHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueSetMetadataHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.ServiceGetPropertiesHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.ServiceGetStatisticsHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.ServiceListQueuesSegmentHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Queues.ServiceRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String)">
            <summary> Initializes a new instance of ServiceRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="url"> The URL of the service account, queue or message that is the target of the desired operation. </param>
            <param name="version"> Specifies the version of the operation to use for this request. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="url" /> or <paramref name="version" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.SetPropertiesAsync(Azure.Storage.Queues.Models.QueueServiceProperties,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Sets properties for a storage account's Queue service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. </summary>
            <param name="storageServiceProperties"> The StorageService properties. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="storageServiceProperties" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.SetProperties(Azure.Storage.Queues.Models.QueueServiceProperties,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Sets properties for a storage account's Queue service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. </summary>
            <param name="storageServiceProperties"> The StorageService properties. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="storageServiceProperties" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.GetPropertiesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> gets the properties of a storage account's Queue service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.GetProperties(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> gets the properties of a storage account's Queue service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.GetStatisticsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Retrieves statistics related to replication for the Queue service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.GetStatistics(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Retrieves statistics related to replication for the Queue service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account. </summary>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.ListQueuesSegmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The List Queues Segment operation returns a list of the queues under the specified account. </summary>
            <param name="prefix"> Filters the results to return only queues whose name begins with the specified prefix. </param>
            <param name="marker"> A string value that identifies the portion of the list of queues to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all queues remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client. </param>
            <param name="maxresults"> Specifies the maximum number of queues to return. If the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible that the service will return fewer results than specified by maxresults, or than the default of 5000. </param>
            <param name="include"> Include this parameter to specify that the queues' metadata be returned as part of the response body. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.ListQueuesSegment(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The List Queues Segment operation returns a list of the queues under the specified account. </summary>
            <param name="prefix"> Filters the results to return only queues whose name begins with the specified prefix. </param>
            <param name="marker"> A string value that identifies the portion of the list of queues to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all queues remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client. </param>
            <param name="maxresults"> Specifies the maximum number of queues to return. If the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible that the service will return fewer results than specified by maxresults, or than the default of 5000. </param>
            <param name="include"> Include this parameter to specify that the queues' metadata be returned as part of the response body. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.ListQueuesSegmentNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The List Queues Segment operation returns a list of the queues under the specified account. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="prefix"> Filters the results to return only queues whose name begins with the specified prefix. </param>
            <param name="marker"> A string value that identifies the portion of the list of queues to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all queues remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client. </param>
            <param name="maxresults"> Specifies the maximum number of queues to return. If the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible that the service will return fewer results than specified by maxresults, or than the default of 5000. </param>
            <param name="include"> Include this parameter to specify that the queues' metadata be returned as part of the response body. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Queues.ServiceRestClient.ListQueuesSegmentNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The List Queues Segment operation returns a list of the queues under the specified account. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="prefix"> Filters the results to return only queues whose name begins with the specified prefix. </param>
            <param name="marker"> A string value that identifies the portion of the list of queues to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all queues remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client. </param>
            <param name="maxresults"> Specifies the maximum number of queues to return. If the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible that the service will return fewer results than specified by maxresults, or than the default of 5000. </param>
            <param name="include"> Include this parameter to specify that the queues' metadata be returned as part of the response body. </param>
            <param name="timeout"> The The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations&gt;Setting Timeouts for Queue Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="P:Azure.Storage.Queues.ServiceSetPropertiesHeaders.Version">
            <summary> Indicates the version of the Queue service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Specialized.SpecializedQueueExtensions">
            <summary>
            Add methods to <see cref="N:Azure.Storage.Queues" /> clients.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Specialized.SpecializedQueueExtensions.WithClientSideEncryptionOptions(Azure.Storage.Queues.QueueClient,Azure.Storage.ClientSideEncryptionOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" /> class, maintaining all the same
            internals but specifying new <see cref="T:Azure.Storage.ClientSideEncryptionOptions" />.
            </summary>
            <param name="client">Client to base off of.</param>
            <param name="clientSideEncryptionOptions">New encryption options. Setting this to <code>default</code> will clear client-side encryption.</param>
            <returns>New instance with provided options and same internals otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Queues.Specialized.SpecializedQueueExtensions.GetParentQueueServiceClient(Azure.Storage.Queues.QueueClient)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Queues.QueueServiceClient" /> that pointing to this <see cref="T:Azure.Storage.Queues.QueueClient" />'s queue service.
            The new <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            uses the same request policy pipeline as the
            <see cref="T:Azure.Storage.Queues.QueueClient" />.
            </summary>
            <returns>A new <see cref="T:Azure.Storage.Queues.QueueServiceClient" /> instance.</returns>
        </member>
        <member name="T:Azure.Storage.Queues.Specialized.QueueClientSideEncryptionOptions">
            <summary>
            Contains Queues-specific options for client-side encryption.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Specialized.QueueClientSideEncryptionOptions.#ctor(Azure.Storage.ClientSideEncryptionVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.Specialized.QueueClientSideEncryptionOptions" /> class.
            </summary>
            <param name="version">The version of clientside encryption to use.</param>
        </member>
        <member name="E:Azure.Storage.Queues.Specialized.QueueClientSideEncryptionOptions.DecryptionFailed">
            <summary>
            Event when failure to decrypt a message occurs.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Specialized.QueueClientSideEncryptionOptions.CloneFrom(Azure.Storage.ClientSideEncryptionOptions)">
            <summary>
            Clones the given <see cref="T:Azure.Storage.ClientSideEncryptionOptions" /> as an instance of
            <see cref="T:Azure.Storage.Queues.Specialized.QueueClientSideEncryptionOptions" />. If the given instance is also a
            <see cref="T:Azure.Storage.Queues.Specialized.QueueClientSideEncryptionOptions" />, this clones it's specialty data as well.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Azure.Storage.Queues.Specialized.ClientSideDecryptionFailureEventArgs">
            <summary>
            Event args for when a queue message decryption fails.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.Specialized.ClientSideDecryptionFailureEventArgs.Exception">
            <summary>
            The exception thrown.
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.Specialized.SpecializedQueueClientOptions">
            <summary>
            Provides advanced client configuration options for connecting to Azure Queue
            Storage.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.Specialized.SpecializedQueueClientOptions.#ctor(Azure.Storage.Queues.QueueClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClientOptions" />
            class.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Storage.Queues.QueueClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </param>
        </member>
        <member name="P:Azure.Storage.Queues.Specialized.SpecializedQueueClientOptions.ClientSideEncryption">
             <summary>
             Settings for data encryption within the SDK. Client-side encryption adds metadata to your queue
             messages which is necessary to maintain for decryption.
            
             For more information, see <a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-client-side-encryption" />.
             </summary>
        </member>
        <member name="T:Azure.Storage.Queues.QueueClient">
            <summary>
            A QueueClient represents a URI to the Azure Storage Queue service allowing you to manipulate a queue.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.Uri">
            <summary>
            Gets the Uri endpoint used by the object.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.MessagesUri">
            <summary>
            Gets the Uri endpoint used by the object's messages.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.ClientConfiguration">
            <summary>
            QueueClientConfiguration.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.QueueRestClient">
            <summary>
            Gets the QueueRestClient.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.MessagesRestClient">
            <summary>
            Gets the MessagesRestClient.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.MessageIdRestClient">
            <summary>
            Gets the MessageIdRestClient.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.MaxPeekableMessages">
            <summary>
            QueueMaxMessagesPeek indicates the maximum number of messages
            you can retrieve with each call to Peek.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.MessageMaxBytes">
            <summary>
            Gets the maximum number of bytes allowed for a message's UTF-8 text.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.AccountName">
            <summary>
            Gets the Storage account name corresponding to the queue client.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.Name">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClient.CanGenerateSasUri">
            <summary>
            Determines whether the client is able to generate a SAS.
            If the client is authenticated with a <see cref="T:Azure.Storage.StorageSharedKeyCredential" />.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
            class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
             class.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, see
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>.
             </param>
             <param name="queueName">
             The name of the queue in the storage account to reference.
             </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor(System.String,System.String,Azure.Storage.Queues.QueueClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
             class.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, see
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>.
             </param>
             <param name="queueName">
             The name of the queue in the storage account to reference.
             </param>
             <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor(System.Uri,Azure.Storage.Queues.QueueClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
            class.
            </summary>
            <param name="queueUri">
            A <see cref="P:Azure.Storage.Queues.QueueClient.Uri" /> referencing the queue that includes the
            name of the account, the name of the queue, and a SAS token.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net/{queue_name}?{sas_token}".
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <seealso href="https://docs.microsoft.com/azure/storage/common/storage-sas-overview">Storage SAS Token Overview</seealso>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Queues.QueueClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
            class.
            </summary>
            <param name="queueUri">
            A <see cref="P:Azure.Storage.Queues.QueueClient.Uri" /> referencing the queue that includes the
            name of the account, and the name of the queue.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net/{queue_name}".
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor(System.Uri,Azure.AzureSasCredential,Azure.Storage.Queues.QueueClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
            class.
            </summary>
            <param name="queueUri">
            A <see cref="P:Azure.Storage.Queues.QueueClient.Uri" /> referencing the queue that includes the
            name of the account, and the name of the queue.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net/{queue_name}".
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Queues.QueueClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
            class.
            </summary>
            <param name="queueUri">
            A <see cref="P:Azure.Storage.Queues.QueueClient.Uri" /> referencing the queue that includes the
            name of the account, and the name of the queue.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net/{queue_name}".
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Queues.QueueClientOptions,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
            class.
            </summary>
            <param name="queueUri">
            A <see cref="P:Azure.Storage.Queues.QueueClient.Uri" /> referencing the queue that includes the
            name of the account, and the name of the queue.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net/{queue_name}".
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="storageSharedKeyCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.#ctor(System.Uri,Azure.Storage.Queues.QueueClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" />
            class.
            </summary>
            <param name="queueUri">
            A <see cref="P:Azure.Storage.Queues.QueueClient.Uri" /> referencing the queue that includes the
            name of the account, and the name of the queue.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net/{queue_name}".
            </param>
            <param name="clientConfiguration">
            <see cref="T:Azure.Storage.Queues.QueueClientConfiguration" />.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.WithClientSideEncryptionOptionsCore(Azure.Storage.ClientSideEncryptionOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Storage.Queues.QueueClient" /> class, maintaining all the same
            internals but specifying new <see cref="T:Azure.Storage.ClientSideEncryptionOptions" />.
            </summary>
            <param name="clientSideEncryptionOptions">New encryption options. Setting this to <code>default</code> will clear client-side encryption.</param>
            <returns>New instance with provided options and same internals otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.Create(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Creates a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-queue4">
             Create Queue</see>.
             </summary>
             <param name="metadata">
             Optional <see cref="T:System.Collections.Generic.IDictionary`2" />.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Creates a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-queue4">
             Create Queue</see>.
             </summary>
             <param name="metadata">
             Optional <see cref="T:System.Collections.Generic.IDictionary`2" />.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.CreateIfNotExists(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueClient.CreateIfNotExists(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
             operation creates a new queue under the specified account.
             If the queue already exists, it is not changed.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-queue4">
             Create Queue</see>.
             </summary>
             <param name="metadata">
             Optional custom metadata to set for this queue.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             If the queue does not already exist, a <see cref="T:Azure.Response" />
             describing the newly created queue. If the queue already exists, <c>null</c>.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.CreateIfNotExistsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueClient.CreateIfNotExistsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
             operation creates a new queue under the specified account.
             If the queue already exists, it is not changed.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-queue4">
             Create Queue</see>.
             </summary>
             <param name="metadata">
             Optional custom metadata to set for this queue.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             If the queue does not already exist, a <see cref="T:Azure.Response" />
             describing the newly created queue. If the queue already exists, <c>null</c>.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.Exists(System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Queues.QueueClient.Exists(System.Threading.CancellationToken)" /> operation can be called on a
            <see cref="T:Azure.Storage.Queues.QueueClient" /> to see if the associated queue
            exists on the storage account in the storage service.
            </summary>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns true if the queue exists.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Queues.QueueClient.ExistsAsync(System.Threading.CancellationToken)" /> operation can be called on a
            <see cref="T:Azure.Storage.Queues.QueueClient" /> to see if the associated queue
            exists on the storage account in the storage service.
            </summary>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns true if the queue exists.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.DeleteIfExists(System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueClient.DeleteIfExists(System.Threading.CancellationToken)" /> operation deletes the specified
             queue if it exists.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3">
             Delete Queue</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> Returns true if queue exists and was
             deleted, return false otherwise.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.DeleteIfExistsAsync(System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueClient.DeleteIfExistsAsync(System.Threading.CancellationToken)" /> operation deletes the specified
             queue if it exists.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3">
             Delete Queue</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> Returns true if queue exists and was
             deleted, return false otherwise.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.Delete(System.Threading.CancellationToken)">
             <summary>
             Deletes a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-queue3">
             Delete Queue</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.DeleteAsync(System.Threading.CancellationToken)">
             <summary>
             Deletes a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-queue3">
             Delete Queue</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.GetProperties(System.Threading.CancellationToken)">
             <summary>
             Retrieves queue properties and user-defined metadata and properties on the specified queue.
             Metadata is associated with the queue as name-values pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-queue-metadata">
             Get Queue Metadata</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.GetPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
             Retrieves queue properties and user-defined metadata and properties on the specified queue.
             Metadata is associated with the queue as name-values pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-queue-metadata">
             Get Queue Metadata</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Sets user-defined metadata on the specified queue. Metadata is associated with the queue as name-value pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-queue-metadata">
             Set Queue Metadata</see>.
             </summary>
             <param name="metadata">
             <see cref="T:System.Collections.Generic.IDictionary`2" />
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Sets user-defined metadata on the specified queue. Metadata is associated with the queue as name-value pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-queue-metadata">
             Set Queue Metadata</see>.
             </summary>
             <param name="metadata">
             <see cref="T:System.Collections.Generic.IDictionary`2" />
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.GetAccessPolicy(System.Threading.CancellationToken)">
             <summary>
             Returns details about any stored access policies specified on the queue that may be used with
             Shared Access Signatures.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-queue-acl">
             Get Queue ACL</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.GetAccessPolicyAsync(System.Threading.CancellationToken)">
             <summary>
             Returns details about any stored access policies specified on the queue that may be used with
             Shared Access Signatures.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-queue-acl">
             Get Queue ACL</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SetAccessPolicy(System.Collections.Generic.IEnumerable{Azure.Storage.Queues.Models.QueueSignedIdentifier},System.Threading.CancellationToken)">
             <summary>
             SetAccessPolicyAsync sets stored access policies for the queue that may be used with Shared Access Signatures.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-queue-acl">
             Set Queue ACL</see>.
             </summary>
             <param name="permissions">
             IEnumerable of <see cref="T:Azure.Storage.Queues.Models.QueueSignedIdentifier" />
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SetAccessPolicyAsync(System.Collections.Generic.IEnumerable{Azure.Storage.Queues.Models.QueueSignedIdentifier},System.Threading.CancellationToken)">
             <summary>
             SetAccessPolicyAsync sets stored access policies for the queue that may be used with Shared Access Signatures.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-queue-acl">
             Set Queue ACL</see>.
             </summary>
             <param name="permissions">
             IEnumerable of <see cref="T:Azure.Storage.Queues.Models.QueueSignedIdentifier" />
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ClearMessages(System.Threading.CancellationToken)">
             <summary>
             Deletes all messages from a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/clear-messages">
             Clear Messages</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ClearMessagesAsync(System.Threading.CancellationToken)">
             <summary>
             Deletes all messages from a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/clear-messages">
             Clear Messages</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SendMessage(System.String)">
             <summary>
             Adds a new message to the back of a queue. The visibility timeout specifies how long the message should be invisible
             to Dequeue and Peek operations.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/put-message">
             Put Message</see>.
             </summary>
             <param name="messageText">
             Message text.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SendMessageAsync(System.String)">
             <summary>
             Adds a new message to the back of a queue. The visibility timeout specifies how long the message should be invisible
             to Dequeue and Peek operations.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/put-message">
             Put Message</see>.
             </summary>
             <param name="messageText">
             Message text.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SendMessage(System.String,System.Threading.CancellationToken)">
             <summary>
             Adds a new message to the back of a queue. The visibility timeout specifies how long the message should be invisible
             to Dequeue and Peek operations.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/put-message">
             Put Message</see>.
             </summary>
             <param name="messageText">
             Message text.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SendMessageAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Adds a new message to the back of a queue. The visibility timeout specifies how long the message should be invisible
             to Dequeue and Peek operations.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/put-message">
             Put Message</see>.
             </summary>
             <param name="messageText">
             Message text.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SendMessage(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Adds a new message to the back of a queue. The visibility timeout specifies how long the message should be invisible
             to Dequeue and Peek operations.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/put-message">
             Put Message</see>.
             </summary>
             <param name="messageText">
             Message text.
             </param>
             <param name="visibilityTimeout">
             Visibility timeout.  Optional with a default value of 0.  Cannot be larger than 7 days.
             </param>
             <param name="timeToLive">
             Optional. Specifies the time-to-live interval for the message
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SendMessage(System.BinaryData,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Adds a new message to the back of a queue. The visibility timeout specifies how long the message should be invisible
             to Dequeue and Peek operations.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/put-message">
             Put Message</see>.
             </summary>
             <param name="message">
             Message.
             </param>
             <param name="visibilityTimeout">
             Visibility timeout.  Optional with a default value of 0.  Cannot be larger than 7 days.
             </param>
             <param name="timeToLive">
             Optional. Specifies the time-to-live interval for the message
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SendMessageAsync(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Adds a new message to the back of a queue. The visibility timeout specifies how long the message should be invisible
             to Dequeue and Peek operations.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/put-message">
             Put Message</see>.
             </summary>
             <param name="messageText">
             Message text.
             </param>
             <param name="visibilityTimeout">
             Visibility timeout.  Optional with a default value of 0.  Cannot be larger than 7 days.
             </param>
             <param name="timeToLive">
             Optional. Specifies the time-to-live interval for the message
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.SendMessageAsync(System.BinaryData,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Adds a new message to the back of a queue. The visibility timeout specifies how long the message should be invisible
             to Dequeue and Peek operations.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/put-message">
             Put Message</see>.
             </summary>
             <param name="message">
             Message.
             </param>
             <param name="visibilityTimeout">
             Visibility timeout.  Optional with a default value of 0.  Cannot be larger than 7 days.
             </param>
             <param name="timeToLive">
             Optional. Specifies the time-to-live interval for the message
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ReceiveMessages">
             <summary>
             Receives one or more messages from the front of the queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-messages">
             Get Messages</see>.
             </summary>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is an array of <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ReceiveMessagesAsync">
             <summary>
             Retrieves one or more messages from the front of the queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-messages">
             Get Messages</see>.
             </summary>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is an array of <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ReceiveMessages(System.Threading.CancellationToken)">
             <summary>
             Receives one or more messages from the front of the queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-messages">
             Get Messages</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is an array of <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ReceiveMessagesAsync(System.Threading.CancellationToken)">
             <summary>
             Retrieves one or more messages from the front of the queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-messages">
             Get Messages</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is an array of <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ReceiveMessages(System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Receives one or more messages from the front of the queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-messages">
             Get Messages</see>.
             </summary>
             <param name="maxMessages">
             Optional. A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32.
             If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation.
             </param>
             <param name="visibilityTimeout">
             Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The default value is 30 seconds.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is an array of <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ReceiveMessagesAsync(System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Retrieves one or more messages from the front of the queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-messages">
             Get Messages</see>.
             </summary>
             <param name="maxMessages">
             Optional. A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32.
             If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation.
             </param>
             <param name="visibilityTimeout">
             Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The default value is 30 seconds.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is an array of <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ReceiveMessage(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Receives one message from the front of the queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-messages">
             Get Messages</see>.
             </summary>
             <param name="visibilityTimeout">
             Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The default value is 30 seconds.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is a <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.ReceiveMessageAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Retrieves one message from the front of the queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-messages">
             Get Messages</see>.
             </summary>
             <param name="visibilityTimeout">
             Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The default value is 30 seconds.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is a <see cref="T:Azure.Storage.Queues.Models.QueueMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.PeekMessage(System.Threading.CancellationToken)">
             <summary>
             Retrieves one message from the front of the queue but does not alter the visibility of the message.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/peek-messages">
             Peek Messages</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is a <see cref="T:Azure.Storage.Queues.Models.PeekedMessage" />. Returns null if there are no messages in the queue.
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.PeekMessageAsync(System.Threading.CancellationToken)">
             <summary>
             Retrieves one message from the front of the queue but does not alter the visibility of the message.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/peek-messages">
             Peek Messages</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is a <see cref="T:Azure.Storage.Queues.Models.PeekedMessage" />. Returns null if there are no messages in the queue.
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.PeekMessages(System.Nullable{System.Int32},System.Threading.CancellationToken)">
             <summary>
             Retrieves one or more messages from the front of the queue but does not alter the visibility of the message.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/peek-messages">
             Peek Messages</see>.
             </summary>
             <param name="maxMessages">
             Optional. A nonzero integer value that specifies the number of messages to peek from the queue, up to a maximum of 32.
             By default, a single message is peeked from the queue with this operation.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is an array of <see cref="T:Azure.Storage.Queues.Models.PeekedMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.PeekMessagesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
             <summary>
             Retrieves one or more messages from the front of the queue but does not alter the visibility of the message.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/peek-messages">
             Peek Messages</see>.
             </summary>
             <param name="maxMessages">
             Optional. A nonzero integer value that specifies the number of messages to peek from the queue, up to a maximum of 32.
             By default, a single message is peeked from the queue with this operation.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" /> where T is an array of <see cref="T:Azure.Storage.Queues.Models.PeekedMessage" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.DeleteMessage(System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Permanently removes the specified message from its queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-message2">
             Delete Message</see>.
             </summary>
             <param name="messageId">ID of the message to delete.</param>
             <param name="popReceipt">
             Required. A valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response" />.
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.DeleteMessageAsync(System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Permanently removes the specified message from its queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-message2">
             Delete Message</see>.
             </summary>
             <param name="messageId">ID of the message to delete.</param>
             <param name="popReceipt">
             Required. A valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response" />.
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.UpdateMessage(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
             Changes a message's visibility timeout and contents.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/update-message">
             Update Message</see>.
             </summary>
             <param name="messageId">ID of the message to update.</param>
             <param name="popReceipt">
             Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation.
             </param>
             <param name="messageText">
             Optional. Updated message text.
             </param>
             <param name="visibilityTimeout">
             Required. Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than
             or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the
             expiry time. A message can be updated until it has been deleted or has expired.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />.
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.UpdateMessage(System.String,System.String,System.BinaryData,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
             Changes a message's visibility timeout and contents.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/update-message">
             Update Message</see>.
             </summary>
             <param name="messageId">ID of the message to update.</param>
             <param name="popReceipt">
             Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation.
             </param>
             <param name="message">
             Optional. Updated message.
             </param>
             <param name="visibilityTimeout">
             Required. Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than
             or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the
             expiry time. A message can be updated until it has been deleted or has expired.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />.
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.UpdateMessageAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
             Changes a message's visibility timeout and contents.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/update-message">
             Update Message</see>.
             </summary>
             <param name="messageId">ID of the message to update.</param>
             <param name="popReceipt">
             Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation.
             </param>
             <param name="messageText">
             Optional. Updated message text.
             </param>
             <param name="visibilityTimeout">
             Required. Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than
             or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the
             expiry time. A message can be updated until it has been deleted or has expired.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />.
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.UpdateMessageAsync(System.String,System.String,System.BinaryData,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
             Changes a message's visibility timeout and contents.
            
             A message must be in a format that can be included in an XML request with UTF-8 encoding.
             Otherwise <see cref="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding" /> option can be set to <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> to handle non compliant messages.
             The encoded message can be up to 64 KiB in size for versions 2011-08-18 and newer, or 8 KiB in size for previous versions.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/update-message">
             Update Message</see>.
             </summary>
             <param name="messageId">ID of the message to update.</param>
             <param name="popReceipt">
             Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation.
             </param>
             <param name="message">
             Optional. Updated message.
             </param>
             <param name="visibilityTimeout">
             Required. Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than
             or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the
             expiry time. A message can be updated until it has been deleted or has expired.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" />.
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />.
             </returns>
             <remarks>
             This version of library does not encode message by default.
             <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.Base64" /> was the default behavior in the prior v11 library.  See
             <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.GenerateSasUri(Azure.Storage.Sas.QueueSasPermissions,System.DateTimeOffset)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueClient.GenerateSasUri(Azure.Storage.Sas.QueueSasPermissions,System.DateTimeOffset)" />
             returns a <see cref="P:Azure.Storage.Queues.QueueClient.Uri" /> that generates a Queue Service
             Shared Access Signature (SAS) Uri based on the Client properties
             and parameters passed.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a Service SAS</see>.
             </summary>
             <param name="permissions">
             Required. Specifies the list of permissions to be associated with the SAS.
             See <see cref="T:Azure.Storage.Sas.QueueSasPermissions" />.
             </param>
             <param name="expiresOn">
             Required. Specifies the time at which the SAS becomes invalid. This field
             must be omitted if it has been specified in an associated stored access policy.
             </param>
             <returns>
             A <see cref="T:Azure.Storage.Sas.QueueSasBuilder" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.GenerateSasUri(Azure.Storage.Sas.QueueSasBuilder)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueClient.GenerateSasUri(Azure.Storage.Sas.QueueSasBuilder)" /> returns a
             <see cref="P:Azure.Storage.Queues.QueueClient.Uri" /> that generates a Queue Service SAS Uri based
             on the Client properties and builder passed.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a Service SAS</see>
             </summary>
             <param name="builder">
             Used to generate a Shared Access Signature (SAS)
             </param>
             <returns>
             A <see cref="T:Azure.Storage.Sas.QueueSasBuilder" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.OnMessageDecodingFailedAsync(Azure.Storage.Queues.Models.QueueMessage,Azure.Storage.Queues.Models.PeekedMessage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Raises <see cref="E:Azure.Storage.Queues.QueueClientOptions.MessageDecodingFailed" /> event.
            </summary>
            <param name="receivedMessage">The <see cref="T:Azure.Storage.Queues.Models.QueueMessage" /> with raw body, if present.</param>
            <param name="peekedMessage">The <see cref="T:Azure.Storage.Queues.Models.PeekedMessage" /> with raw body, if present.</param>
            <param name="isRunningSynchronously">A value indicating whether the event handler was invoked
            synchronously or asynchronously.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClient.GetParentQueueServiceClientCore">
            <summary>
            Create a new <see cref="T:Azure.Storage.Queues.QueueServiceClient" /> that pointing to this <see cref="T:Azure.Storage.Queues.QueueClient" />'s queue service.
            The new <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            uses the same request policy pipeline as the
            <see cref="T:Azure.Storage.Queues.QueueClient" />.
            </summary>
            <returns>A new <see cref="T:Azure.Storage.Queues.QueueServiceClient" /> instance.</returns>
        </member>
        <member name="T:Azure.Storage.Queues.QueueClientOptions">
            <summary>
            Provides the client configuration options for connecting to Azure Queue
            Storage
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.LatestVersion">
            <summary>
            The Latest service version supported by this client library.
            </summary>
        </member>
        <member name="T:Azure.Storage.Queues.QueueClientOptions.ServiceVersion">
             <summary>
             The versions of Azure Queue Storage supported by this client
             library.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/versioning-for-the-azure-storage-services">
             Versioning for the Azure Storage services</see>.
             </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2019_02_02">
            <summary>
            The 2019-02-02 service version described at
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/version-2019-02-02">
            Version 2019-02-02</see>.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2019_07_07">
            <summary>
            The 2019-07-07 service version described at
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/version-2019-07-07">
            Version 2019-07-07</see>.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2019_12_12">
            <summary>
            The 2019-12-12 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2020_02_10">
            <summary>
            The 2020-02-10 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2020_04_08">
            <summary>
            The 2020-04-08 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2020_06_12">
            <summary>
            The 2020-06-12 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2020_08_04">
            <summary>
            The 2020-08-14 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2020_10_02">
            <summary>
            The 2020-10-02 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2020_12_06">
            <summary>
            The 2020-12-06 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2021_02_12">
            <summary>
            The 2021-02-12 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2021_04_10">
            <summary>
            The 2021-04-10 serivce version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2021_06_08">
            <summary>
            The 2021-06-08 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueClientOptions.ServiceVersion.V2021_08_06">
            <summary>
            The 2021-08-06 service version.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClientOptions.Version">
            <summary>
            Gets the <see cref="T:Azure.Storage.Queues.QueueClientOptions.ServiceVersion" /> of the service API used when
            making requests.  For more, see
            For more information, see
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/versioning-for-the-azure-storage-services">
            Versioning for the Azure Storage services</see>.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClientOptions.#ctor(Azure.Storage.Queues.QueueClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueClientOptions" />
            class.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Storage.Queues.QueueClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </param>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClientOptions.GeoRedundantSecondaryUri">
             <summary>
             Gets or sets the secondary storage <see cref="T:System.Uri" /> that can be read from for the storage account if the
             account is enabled for RA-GRS.
            
             If this property is set, the secondary Uri will be used for GET or HEAD requests during retries.
             If the status of the response from the secondary Uri is a 404, then subsequent retries for
             the request will not use the secondary Uri again, as this indicates that the resource
             may not have propagated there yet. Otherwise, subsequent retries will alternate back and forth
             between primary and secondary Uri.
             </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClientOptions.MessageEncoding">
            <summary>
            Gets or sets a message encoding that determines how <see cref="P:Azure.Storage.Queues.Models.QueueMessage.Body" /> is represented in HTTP requests and responses.
            The default is <see cref="F:Azure.Storage.Queues.QueueMessageEncoding.None" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueClientOptions.EnableTenantDiscovery">
            <summary>
             Enables tenant discovery through the authorization challenge when the client is configured to use a TokenCredential.
            When enabled, the client will attempt an initial un-authorized request to prompt a challenge in order to discover the correct tenant for the resource.
            </summary>
        </member>
        <member name="E:Azure.Storage.Queues.QueueClientOptions.MessageDecodingFailed">
             <summary>
             Optional. Performs the tasks needed when a message is received or peaked from the queue but cannot be decoded.
            
             <para>Such message can be received or peaked when <see cref="T:Azure.Storage.Queues.QueueClient" /> is expecting certain <see cref="T:Azure.Storage.Queues.QueueMessageEncoding" />
             but there's another producer that is not encoding messages in expected way. I.e. the queue contains messages with different encoding.</para>
            
             <para><see cref="T:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs" /> contains <see cref="T:Azure.Storage.Queues.QueueClient" /> that has received the message as well as
             <see cref="P:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs.ReceivedMessage" /> or <see cref="P:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs.PeekedMessage" />
             with raw body, i.e. no decoding will be attempted so that
             body can be inspected as has been received from the queue.</para>
            
             <para>The <see cref="T:Azure.Storage.Queues.QueueClient" /> won't attempt to remove the message from the queue. Therefore such handling should be included into
             the event handler itself.</para>
            
             <para>The handler is potentially invoked by both synchronous and asynchronous receive and peek APIs. Therefore implementation of the handler should align with
             <see cref="T:Azure.Storage.Queues.QueueClient" /> APIs that are being used.
             See <see cref="T:Azure.Core.SyncAsyncEventHandler`1" /> about how to implement handler correctly. The example below shows a handler with all possible cases explored.
             <code snippet="Snippet:Azure_Storage_Queues_Samples_Sample03_MessageEncoding_MessageDecodingFailedHandlerAsync" language="csharp">
             QueueClientOptions queueClientOptions = new QueueClientOptions()
             {
                 MessageEncoding = QueueMessageEncoding.Base64
             };
            
             queueClientOptions.MessageDecodingFailed += async (QueueMessageDecodingFailedEventArgs args) =&gt;
             {
                 if (args.PeekedMessage != null)
                 {
                     Console.WriteLine($"Invalid message has been peeked, message id={args.PeekedMessage.MessageId} body={args.PeekedMessage.Body}");
                 }
                 else if (args.ReceivedMessage != null)
                 {
                     Console.WriteLine($"Invalid message has been received, message id={args.ReceivedMessage.MessageId} body={args.ReceivedMessage.Body}");
            
                     if (args.IsRunningSynchronously)
                     {
                         args.Queue.DeleteMessage(args.ReceivedMessage.MessageId, args.ReceivedMessage.PopReceipt);
                     }
                     else
                     {
                         await args.Queue.DeleteMessageAsync(args.ReceivedMessage.MessageId, args.ReceivedMessage.PopReceipt);
                     }
                 }
             };
            
             QueueClient queueClient = new QueueClient(connectionString, queueName, queueClientOptions);
             </code>
             </para>
             </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClientOptions.Build(Azure.Core.Pipeline.HttpPipelinePolicy)">
            <summary>
            Create an HttpPipeline from QueueClientOptions.
            </summary>
            <param name="authentication">Optional authentication policy.</param>
            <returns>An HttpPipeline to use for Storage requests.</returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueClientOptions.Build(System.Object)">
            <summary>
            Create an HttpPipeline from QueueClientOptions.
            </summary>
            <param name="credentials">Optional authentication credentials.</param>
            <returns>An HttpPipeline to use for Storage requests.</returns>
        </member>
        <member name="T:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs">
            <summary>
            Contains information about message that could not be decoded.
            See also <see cref="E:Azure.Storage.Queues.QueueClientOptions.MessageDecodingFailed" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs.Queue">
            <summary>
            Gets the <see cref="T:Azure.Storage.Queues.QueueClient" /> that has received message.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs.ReceivedMessage">
            <summary>
            Gets the <see cref="T:Azure.Storage.Queues.Models.QueueMessage" /> that has been received and could not be decoded.
            The body of the message is as received, i.e. no decoding is attempted.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs.PeekedMessage">
            <summary>
            Gets the <see cref="P:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs.PeekedMessage" /> that has been peeked and could not be decoded.
            The body of the message is as received, i.e. no decoding is attempted.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs.#ctor(Azure.Storage.Queues.QueueClient,Azure.Storage.Queues.Models.QueueMessage,Azure.Storage.Queues.Models.PeekedMessage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs" />.
            </summary>
            <param name="queueClient">The <see cref="T:Azure.Storage.Queues.QueueClient" /> that has received invalid message.</param>
            <param name="receivedMessage">The received <see cref="T:Azure.Storage.Queues.Models.QueueMessage" /> message.</param>
            <param name="peekedMessage">The peeked <see cref="P:Azure.Storage.Queues.QueueMessageDecodingFailedEventArgs.PeekedMessage" /> message.</param>
            <param name="isRunningSynchronously">
            A value indicating whether the event handler was invoked
            synchronously or asynchronously.  Please see
            <see cref="T:Azure.Core.SyncAsyncEventHandler`1" /> for more details.
            </param>
            <param name="cancellationToken">
            A cancellation token related to the original operation that raised
            the event.  It's important for your handler to pass this token
            along to any asynchronous or long-running synchronous operations
            that take a token so cancellation will correctly propagate.  The
            default value is <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="queueClient" /> is null.
            </exception>
        </member>
        <member name="T:Azure.Storage.Queues.QueueMessageEncoding">
            <summary>
            Determines how <see cref="P:Azure.Storage.Queues.Models.QueueMessage.Body" /> is represented in HTTP requests and responses.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueMessageEncoding.None">
            <summary>
            The <see cref="P:Azure.Storage.Queues.Models.QueueMessage.Body" /> is represented verbatim in HTTP requests and responses. I.e. message is not transformed.
            </summary>
        </member>
        <member name="F:Azure.Storage.Queues.QueueMessageEncoding.Base64">
            <summary>
            The <see cref="P:Azure.Storage.Queues.Models.QueueMessage.Body" /> is represented as Base64 encoded string in HTTP requests and responses.
            </summary>
            <remarks>
            This was the default behavior in the prior v11 library.  See
            <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.storage.queue.cloudqueue.encodemessage?view=azure-dotnet-legacy">CloudQueue.EncodeMessage</see>.
            Using this option can make interop with an existing application easier.
            </remarks>
        </member>
        <member name="T:Azure.Storage.Queues.QueueServiceClient">
            <summary>
            A QueueServiceClient represents a URL to the Azure Storage Queue service.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueServiceClient.Uri">
            <summary>
            The Uri endpoint used by the object.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueServiceClient.ClientConfiguration">
            <summary>
            QueueClientConfiguration.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueServiceClient.ServiceRestClient">
            <summary>
            ServiceRestClient.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueServiceClient.AccountName">
            <summary>
            Gets the Storage account name corresponding to the service client.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueServiceClient.CanGenerateAccountSasUri">
            <summary>
            Determines whether the client is able to generate a SAS.
            If the client is authenticated with a <see cref="T:Azure.Storage.StorageSharedKeyCredential" />.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
             class.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, see
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>.
             </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor(System.String,Azure.Storage.Queues.QueueClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
             class.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, see
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>.
             </param>
             <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor(System.Uri,Azure.Storage.Queues.QueueClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> referencing the queue that includes the
            name of the account, the name of the queue, and a SAS token.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net/{queue_name}?{sas_token}".
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <seealso href="https://docs.microsoft.com/azure/storage/common/storage-sas-overview">Storage SAS Token Overview</seealso>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Queues.QueueClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> referencing the queue service.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net".
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor(System.Uri,Azure.AzureSasCredential,Azure.Storage.Queues.QueueClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> referencing the queue service.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net".
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Queues.QueueClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> referencing the queue service.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net".
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Queues.QueueClientOptions,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> referencing the queue service.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net".
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="storageSharedKeyCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.#ctor(System.Uri,Azure.Storage.Queues.QueueClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> referencing the queue service.
            This is likely to be similar to "https://{account_name}.queue.core.windows.net".
            </param>
            <param name="clientConfiguration">
            <see cref="T:Azure.Storage.Queues.QueueClientConfiguration" />.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GetQueueClient(System.String)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Queues.QueueClient" /> object by appending
            <paramref name="queueName" /> to the end of <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" />.
            The new <see cref="T:Azure.Storage.Queues.QueueClient" /> uses the same request
            policy pipeline as the <see cref="T:Azure.Storage.Queues.QueueServiceClient" />.
            </summary>
            <param name="queueName">
            The name of the queue to reference.
            </param>
            <returns>
            A <see cref="T:Azure.Storage.Queues.QueueClient" /> for the desired queue.
            </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GetQueues(Azure.Storage.Queues.Models.QueueTraits,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueServiceClient.GetQueues(Azure.Storage.Queues.Models.QueueTraits,System.String,System.Threading.CancellationToken)" /> operation returns an async
             sequence of queues in the storage account.  Enumerating the
             queues may make multiple requests to the service while fetching
             all the values.  Queue names are returned in lexicographic order.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/list-queues1">
             List Queues</see>.
             </summary>
             <param name="traits">
             Optional trait options for shaping the queues.
             </param>
             <param name="prefix">
             Optional string that filters the results to return only queues
             whose name begins with the specified <paramref name="prefix" />.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             The queues in the storage account.
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GetQueuesAsync(Azure.Storage.Queues.Models.QueueTraits,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueServiceClient.GetQueuesAsync(Azure.Storage.Queues.Models.QueueTraits,System.String,System.Threading.CancellationToken)" /> operation returns an async
             collection of queues in the storage account.  Enumerating the
             queues may make multiple requests to the service while fetching
             all the values.  Queue names are returned in lexicographic order.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/list-queues1">
             List Queues</see>.
             </summary>
             <param name="traits">
             Optional trait options for shaping the queues.
             </param>
             <param name="prefix">
             Optional string that filters the results to return only queues
             whose name begins with the specified <paramref name="prefix" />.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             The queues in the storage account.
             </returns>
             <remarks>
             Use an empty marker to start enumeration from the beginning. Queue names are returned in lexicographic order.
             After getting a segment, process it, and then call ListQueuesSegment again (passing in the next marker) to get the next segment.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GetQueuesInternal(System.String,Azure.Storage.Queues.Models.QueueTraits,System.String,System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Returns a single segment of containers starting from the specified marker.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/list-queues1">
             List Queues</see>.
             </summary>
             <param name="marker">
             Marker from the previous request.
             </param>
             <param name="traits">
             Optional trait options for shaping the queues.
             </param>
             <param name="prefix">
             Optional string that filters the results to return only queues
             whose name begins with the specified <paramref name="prefix" />.
             </param>
             <param name="pageSizeHint">
             Optional hint to specify the desired size of the page returned.
             </param>
             <param name="async">
             Whether to invoke the operation asynchronously.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             A single segment of containers starting from the specified marker, including the next marker if appropriate.
             </returns>
             <remarks>
             Use an empty marker to start enumeration from the beginning. Queue names are returned in lexicographic order.
             After getting a segment, process it, and then call ListQueuesSegmentAsync again (passing in the next marker) to get the next segment.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GetProperties(System.Threading.CancellationToken)">
             <summary>
             Gets the properties of the queue service.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-queue-service-properties">
             Get Queue Service Properties</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GetPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
             Gets the properties of the queue service.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-queue-service-properties">
             Get Queue Service Properties</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.SetProperties(Azure.Storage.Queues.Models.QueueServiceProperties,System.Threading.CancellationToken)">
             <summary>
             Sets the properties of the queue service.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-queue-service-properties">
             Set Queue Service Properties</see>.
             </summary>
             <param name="properties">
             <see cref="T:Azure.Storage.Queues.Models.QueueServiceProperties" />
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.SetPropertiesAsync(Azure.Storage.Queues.Models.QueueServiceProperties,System.Threading.CancellationToken)">
             <summary>
             Sets the properties of the queue service.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-queue-service-properties">
             Set Queue Service Properties</see>.
             </summary>
             <param name="properties">
             <see cref="T:Azure.Storage.Queues.Models.QueueServiceProperties" />
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GetStatistics(System.Threading.CancellationToken)">
             <summary>
             Retrieves statistics related to replication for the Blob service. It is
             only available on the secondary location endpoint when read-access
             geo-redundant replication is enabled for the storage account.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-queue-service-stats">
             Get Queue Service Stats</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GetStatisticsAsync(System.Threading.CancellationToken)">
             <summary>
             Retrieves statistics related to replication for the Blob service. It is
             only available on the secondary location endpoint when read-access
             geo-redundant replication is enabled for the storage account.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-queue-service-stats">
             Get Queue Service Stats</see>.
             </summary>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response`1" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.CreateQueue(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Creates a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-queue4">
             Create Queue</see>.
             </summary>
             <param name="queueName">
             The name of the queue to create.
             </param>
             <param name="metadata">
             Optional <see cref="T:System.Collections.Generic.IDictionary`2" />.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             A newly created <see cref="T:Azure.Response`1" />.
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.CreateQueueAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Creates a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-queue4">
             Create Queue</see>.
             </summary>
             <param name="queueName">
             The name of the queue to create.
             </param>
             <param name="metadata">
             Optional <see cref="T:System.Collections.Generic.IDictionary`2" />.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             A newly created <see cref="T:Azure.Response`1" />.
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.DeleteQueue(System.String,System.Threading.CancellationToken)">
             <summary>
             Deletes a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-queue3">
             Delete Queue</see>.
             </summary>
             <param name="queueName">
             The name of the queue to delete.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.DeleteQueueAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Deletes a queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-queue3">
             Delete Queue</see>.
             </summary>
             <param name="queueName">
             The name of the queue to delete.
             </param>
             <param name="cancellationToken">
             <see cref="T:System.Threading.CancellationToken" />
             </param>
             <returns>
             <see cref="T:Azure.Response" />
             </returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GenerateAccountSasUri(Azure.Storage.Sas.AccountSasPermissions,System.DateTimeOffset,Azure.Storage.Sas.AccountSasResourceTypes)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueServiceClient.GenerateAccountSasUri(Azure.Storage.Sas.AccountSasPermissions,System.DateTimeOffset,Azure.Storage.Sas.AccountSasResourceTypes)" />
             returns a <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> that generates a Queue
             Account Shared Access Signature based on the
             Client properties and parameters passed. The SAS is signed by the
             shared key credential of the client.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas">
             Constructing a Service SAS</see>
             </summary>
             <param name="permissions">
             Required. Specifies the list of permissions to be associated with the SAS.
             See <see cref="T:Azure.Storage.Sas.AccountSasPermissions" />.
             </param>
             <param name="expiresOn">
             Required. The time at which the shared access signature becomes invalid.
             </param>
             <param name="resourceTypes">
             Specifies the resource types associated with the shared access signature.
             The user is restricted to operations on the specified resources.
             See <see cref="T:Azure.Storage.Sas.AccountSasResourceTypes" />.
             </param>
             <returns>
             A <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Queues.QueueServiceClient.GenerateAccountSasUri(Azure.Storage.Sas.AccountSasBuilder)">
             <summary>
             The <see cref="M:Azure.Storage.Queues.QueueServiceClient.GenerateAccountSasUri(Azure.Storage.Sas.AccountSasBuilder)" /> returns a Uri that
             generates a Service SAS based on the Client properties and builder passed.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas">
             Constructing a Service SAS</see>
             </summary>
             <param name="builder">
             Used to generate a Shared Access Signature (SAS).
             </param>
             <returns>
             A <see cref="P:Azure.Storage.Queues.QueueServiceClient.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="T:Azure.Storage.Queues.QueueUriBuilder">
             <summary>
             The <see cref="T:Azure.Storage.Queues.QueueUriBuilder" /> class provides a convenient way to
             modify the contents of a <see cref="T:System.Uri" /> instance to point to
             different Azure Storage resources like an account, queue, or message.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/addressing-queue-service-resources">
             Addressing Queue Service Resources</see>.
             </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.Scheme">
            <summary>
            Gets or sets the scheme name of the URI.
            Example: "https"
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.Host">
             <summary>
             Gets or sets the Domain Name System (DNS) host name or IP address
             of a server.
            
             Example: "account.queue.core.windows.net"
             </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.Port">
            <summary>
            Gets or sets the port number of the URI.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.AccountName">
            <summary>
            Gets or sets the Azure Storage account name.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.QueueName">
            <summary>
            Gets or sets the name of a Azure Storage Queue.  The value defaults
            to <see cref="F:System.String.Empty" /> if not present in the
            <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.Messages">
            <summary>
            Gets or sets whether to reference a queue's messages.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.MessageId">
            <summary>
            Gets or sets the ID of a message in a queue.  The value defaults to
            <see cref="F:System.String.Empty" /> if not present in the <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.Sas">
            <summary>
            Gets or sets the Shared Access Signature query parameters, or null
            if not present in the <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Queues.QueueUriBuilder.Query">
            <summary>
            Gets or sets any query information included in the URI that's not
            relevant to addressing Azure storage resources.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueUriBuilder.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Queues.QueueUriBuilder" />
            class with the specified <see cref="T:System.Uri" />.
            </summary>
            <param name="uri">
            The <see cref="T:System.Uri" /> to a storage resource.
            </param>
        </member>
        <member name="M:Azure.Storage.Queues.QueueUriBuilder.ToUri">
            <summary>
            Returns the <see cref="T:System.Uri" /> constructed from the
            <see cref="T:Azure.Storage.Queues.QueueUriBuilder" />'s fields. The <see cref="P:System.Uri.Query" />
            property contains the SAS and additional query parameters.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueUriBuilder.ToString">
            <summary>
            Returns the display string for the specified
            <see cref="T:Azure.Storage.Queues.QueueUriBuilder" /> instance.
            </summary>
            <returns>
            The display string for the specified <see cref="T:Azure.Storage.Queues.QueueUriBuilder" />
            instance.
            </returns>
        </member>
        <member name="T:Azure.Storage.Queues.QueueExtensions">
            <summary>
            Queue enum extensions.
            </summary>
            <summary>
            Queue enum extensions.
            </summary>
        </member>
        <member name="M:Azure.Storage.Queues.QueueExtensions.ToPermissionsString(Azure.Storage.Sas.QueueAccountSasPermissions)">
            <summary>
            Create a permissions string to provide
            <see cref="P:Azure.Storage.Sas.QueueSasBuilder.Permissions" />.
            </summary>
            <returns>A permissions string.</returns>
        </member>
        <member name="M:Azure.Storage.Queues.QueueExtensions.ToPermissionsString(Azure.Storage.Sas.QueueSasPermissions)">
            <summary>
            Create a permissions string to provide
            <see cref="P:Azure.Storage.Sas.QueueSasBuilder.Permissions" />.
            </summary>
            <returns>A permissions string.</returns>
        </member>
        <member name="T:Azure.Storage.Sas.QueueAccountSasPermissions">
            <summary>
            <see cref="T:Azure.Storage.Sas.QueueAccountSasPermissions" /> contains the list of
            permissions that can be set for a file's access policy.  Use
            <see cref="M:Azure.Storage.Sas.QueueSasBuilder.SetPermissions(Azure.Storage.Sas.QueueAccountSasPermissions)" />
            to set the permissions on the <see cref="T:Azure.Storage.Sas.QueueSasBuilder" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueAccountSasPermissions.Read">
            <summary>
            Indicates that Read is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueAccountSasPermissions.Write">
            <summary>
            Indicates that Write is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueAccountSasPermissions.Delete">
            <summary>
            Indicates that Delete is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueAccountSasPermissions.List">
            <summary>
            Indicates that List is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueAccountSasPermissions.Add">
            <summary>
            Indicates that Add is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueAccountSasPermissions.Update">
            <summary>
            Indicates that Update is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueAccountSasPermissions.Process">
            <summary>
            Indicates that Delete is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueAccountSasPermissions.All">
            <summary>
            Indicates that all permissions are set.
            </summary>
        </member>
        <member name="T:Azure.Storage.Sas.QueueSasBuilder">
             <summary>
             <see cref="T:Azure.Storage.Sas.QueueSasBuilder" /> is used to generate a Shared Access
             Signature (SAS) for an Azure Storage queue.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Create  a Service SAS</see>.
             </summary>
        </member>
        <member name="P:Azure.Storage.Sas.QueueSasBuilder.Version">
            <summary>
            The storage service version to use to authenticate requests made
            with this shared access signature, and the service version to use
            when handling requests made with this shared access signature.
            </summary>
            <remarks>
            This property has been deprecated and we will always use the latest
            storage SAS version of the Storage service supported. This change
            does not have any impact on how your application generates or makes
            use of SAS tokens.
            </remarks>
        </member>
        <member name="P:Azure.Storage.Sas.QueueSasBuilder.Protocol">
            <summary>
            The optional signed protocol field specifies the protocol
            permitted for a request made with the SAS.  Possible values are
            <see cref="F:Azure.Storage.Sas.SasProtocol.HttpsAndHttp" />,
            <see cref="F:Azure.Storage.Sas.SasProtocol.Https" />, and
            <see cref="F:Azure.Storage.Sas.SasProtocol.None" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.QueueSasBuilder.StartsOn">
            <summary>
            Optionally specify the time at which the shared access signature
            becomes valid.  If omitted when DateTimeOffset.MinValue is used,
            start time for this call is assumed to be the time when the
            storage service receives the request.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.QueueSasBuilder.ExpiresOn">
            <summary>
            The time at which the shared access signature becomes invalid.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.QueueSasBuilder.Permissions">
            <summary>
            The permissions associated with the shared access signature. The
            user is restricted to operations allowed by the permissions. This
            field must be omitted if it has been specified in an associated
            stored access policy.  <see cref="T:Azure.Storage.Sas.QueueSasPermissions" /> and
            <see cref="T:Azure.Storage.Sas.QueueAccountSasPermissions" /> can be used to create the
            permissions string.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.QueueSasBuilder.IPRange">
            <summary>
            Specifies an IP address or a range of IP addresses from which to
            accept requests. If the IP address from which the request
            originates does not match the IP address or address range
            specified on the SAS token, the request is not authenticated.
            When specifying a range of IP addresses, note that the range is
            inclusive.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.QueueSasBuilder.Identifier">
            <summary>
            An optional unique value up to 64 characters in length that
            correlates to an access policy specified for the container.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.QueueSasBuilder.QueueName">
            <summary>
            The optional name of the blob being made accessible.
            </summary>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Sas.QueueSasBuilder" />
            class.
            </summary>
            <remarks>
            This constructor has been deprecated. Please consider using
            <see cref="M:Azure.Storage.Sas.QueueSasBuilder.#ctor(Azure.Storage.Sas.QueueSasPermissions,System.DateTimeOffset)" />
            to create a Service SAS or
            <see cref="M:Azure.Storage.Sas.QueueSasBuilder.#ctor(Azure.Storage.Sas.QueueAccountSasPermissions,System.DateTimeOffset)" />
            to create an Account SAS. This change does not have any impact on how
            your application generates or makes use of SAS tokens.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.#ctor(Azure.Storage.Sas.QueueSasPermissions,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Sas.QueueSasBuilder" />
            class.
            </summary>
            <param name="permissions">
            The permissions associated with the shared access signature.
            The user is restricted to operations allowed by the permissions.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </param>
            <param name="expiresOn">
            The time at which the shared access signature becomes invalid.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.#ctor(Azure.Storage.Sas.QueueAccountSasPermissions,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Sas.QueueSasBuilder" />
            class.
            </summary>
            <param name="permissions">
            The permissions associated with the shared access signature.
            The user is restricted to operations allowed by the permissions.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </param>
            <param name="expiresOn">
            The time at which the shared access signature becomes invalid.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.SetPermissions(Azure.Storage.Sas.QueueSasPermissions)">
            <summary>
            Sets the permissions for a queue SAS.
            </summary>
            <param name="permissions">
            <see cref="T:Azure.Storage.Sas.QueueSasPermissions" /> containing the allowed permissions.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.SetPermissions(Azure.Storage.Sas.QueueAccountSasPermissions)">
            <summary>
            Sets the permissions for a queue account level SAS.
            </summary>
            <param name="permissions">
            <see cref="T:Azure.Storage.Sas.QueueAccountSasPermissions" /> containing the allowed permissions.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.SetPermissions(System.String,System.Boolean)">
            <summary>
            Sets the permissions for the SAS using a raw permissions string.
            </summary>
            <param name="rawPermissions">
            Raw permissions string for the SAS.
            </param>
            <param name="normalize">
            If the permissions should be validated and correctly ordered.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.SetPermissions(System.String)">
            <summary>
            Sets the permissions for the SAS using a raw permissions string.
            </summary>
            <param name="rawPermissions">Raw permissions string for the SAS.</param>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.ToSasQueryParameters(Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Use an account's <see cref="T:Azure.Storage.StorageSharedKeyCredential" /> to sign this
            shared access signature values to produce the proper SAS query
            parameters for authenticating requests.
            </summary>
            <param name="sharedKeyCredential">
            The storage account's <see cref="T:Azure.Storage.StorageSharedKeyCredential" />.
            </param>
            <returns>
            The <see cref="T:Azure.Storage.Sas.SasQueryParameters" /> used for authenticating
            requests.
            </returns>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.Equals(System.Object)">
            <summary>
            Check if two QueueSasBuilder instances are equal.
            </summary>
            <param name="obj">The instance to compare to.</param>
            <returns>True if they're equal, false otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Sas.QueueSasBuilder.GetHashCode">
            <summary>
            Get a hash code for the QueueSasBuilder.
            </summary>
            <returns>Hash code for the QueueSasBuilder.</returns>
        </member>
        <member name="T:Azure.Storage.Sas.QueueSasPermissions">
            <summary>
            <see cref="T:Azure.Storage.Sas.QueueSasPermissions" /> contains the list of
            permissions that can be set for a file's access policy.  Use
            <see cref="M:Azure.Storage.Sas.QueueSasBuilder.SetPermissions(Azure.Storage.Sas.QueueSasPermissions)" />
            to set the permissions on the <see cref="T:Azure.Storage.Sas.QueueSasBuilder" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueSasPermissions.Read">
            <summary>
            Indicates that Read is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueSasPermissions.Add">
            <summary>
            Indicates that Add is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueSasPermissions.Update">
            <summary>
            Indicates that Update is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueSasPermissions.Process">
            <summary>
            Indicates that Delete is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.QueueSasPermissions.All">
            <summary>
            Indicates that all permissions are set.
            </summary>
        </member>
        <member name="T:Azure.Storage.Sas.SasExtensions">
            <summary>
            Extension methods for Sas.
            </summary>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ToPermissionsString(Azure.Storage.Sas.AccountSasResourceTypes)">
            <summary>
            Creates a string representing which resource types are allowed
            for <see cref="P:Azure.Storage.Sas.AccountSasBuilder.ResourceTypes" />.
            </summary>
            <returns>
            A string representing which resource types are allowed.
            </returns>
            <remarks>
            The order here matches the order used by the portal when generating SAS signatures.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ParseResourceTypes(System.String)">
            <summary>
            Parse a string representing which resource types are accessible
            from a shared access signature.
            </summary>
            <param name="s">
            A string representing which resource types are accessible.
            </param>
            <returns>
            An <see cref="T:Azure.Storage.Sas.AccountSasResourceTypes" /> instance.
            </returns>
            <remarks>
            The order here matches the order used by the portal when generating SAS signatures.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ToProtocolString(Azure.Storage.Sas.SasProtocol)">
            <summary>
            Gets a string representation of the protocol.
            </summary>
            <returns>A string representation of the protocol.</returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ParseProtocol(System.String)">
            <summary>
            Parse a string representation of a protocol.
            </summary>
            <param name="s">A string representation of a protocol.</param>
            <returns>A <see cref="T:Azure.Storage.Sas.SasProtocol" />.</returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ToPermissionsString(Azure.Storage.Sas.AccountSasServices)">
            <summary>
            Creates a string representing which services can be used for
            <see cref="P:Azure.Storage.Sas.AccountSasBuilder.Services" />.
            </summary>
            <returns>
            A string representing which services are allowed.
            </returns>
            <remarks>
            The order here matches the order used by the portal when generating SAS signatures.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ParseAccountServices(System.String)">
            <summary>
            Parse a string representing which services are accessible from a
            shared access signature.
            </summary>
            <param name="s">
            A string representing which services are accessible.
            </param>
            <returns>
            An <see cref="T:Azure.Storage.Sas.AccountSasServices" /> instance.
            </returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.FormatTimesForSasSigning(System.DateTimeOffset)">
            <summary>
            FormatTimesForSASSigning converts a time.Time to a snapshotTimeFormat string suitable for a
            SASField's StartTime or ExpiryTime fields. Returns "" if value.IsZero().
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.AddToBuilder(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Helper method to add query param key value pairs to StringBuilder
            </summary>
            <param name="sb">StringBuilder instance</param>
            <param name="key">query key</param>
            <param name="value">query value</param>
        </member>
        <member name="T:Azure.Storage.Sas.SasQueryParametersInternals">
            <summary>
            Helper to access protected static members of SasQueryParameters.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.SasQueryParametersInternals.DefaultSasVersionInternal">
            <summary>
            Settable internal property to allow different versions in test.
            </summary>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideDecryptor.DecryptReadInternal(System.IO.Stream,Azure.Storage.Cryptography.Models.EncryptionData,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Decrypts the given stream if decryption information is provided.
            Does not shave off unwanted start/end bytes, but will shave off padding.
            </summary>
            <param name="ciphertext">Stream to decrypt.</param>
            <param name="encryptionData">
            Encryption metadata and wrapped content encryption key.
            </param>
            <param name="ivInStream">
            Whether to use the first block of the stream for the IV instead of the value in
            <paramref name="encryptionData" />. Generally for partial blob downloads where the
            previous block of the ciphertext is the IV for the next.
            </param>
            <param name="noPadding">
            Whether to ignore padding. Generally for partial blob downloads where the end of
            the blob (where the padding occurs) was not downloaded. V1 only.
            </param>
            <param name="async">Whether to perform this function asynchronously.</param>
            <param name="cancellationToken"></param>
            <returns>
            Decrypted plaintext.
            </returns>
            <exception cref="T:System.Exception">
            Exceptions thrown based on implementations of <see cref="T:Azure.Core.Cryptography.IKeyEncryptionKey" /> and
            <see cref="T:Azure.Core.Cryptography.IKeyEncryptionKeyResolver" />.
            </exception>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideDecryptor.DecryptWholeContentWriteInternal(System.IO.Stream,Azure.Storage.Cryptography.Models.EncryptionData,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Wraps a write stream in a decryption stream.
            </summary>
            <param name="plaintextDestination">Stream to wrap.</param>
            <param name="encryptionData">
            Encryption metadata and wrapped content encryption key.
            </param>
            <param name="async">Whether to perform this function asynchronously.</param>
            <param name="cancellationToken"></param>
            <returns>
            Decryption stream.
            </returns>
            <exception cref="T:System.Exception">
            Exceptions thrown based on implementations of <see cref="T:Azure.Core.Cryptography.IKeyEncryptionKey" /> and
            <see cref="T:Azure.Core.Cryptography.IKeyEncryptionKeyResolver" />.
            </exception>
            <remarks>
            This method does not accept parameters situational to a ranged read. This library does not
            use a write paradigm for ranged reads, and so this extra support is being skipped.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideDecryptor.GetContentEncryptionKeyAsync(Azure.Storage.Cryptography.Models.EncryptionData,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns the content encryption key for blob. First tries to get the key encryption key from KeyResolver,
            then falls back to IKey stored on this EncryptionPolicy. Unwraps the content encryption key with the
            correct key wrapper.
            </summary>
            <param name="encryptionData">The encryption data.</param>
            <param name="async">Whether to perform asynchronously.</param>
            <param name="cancellationToken"></param>
            <returns>
            Encryption key as a byte array.
            </returns>
            <exception cref="T:System.Exception">
            Exceptions thrown based on implementations of <see cref="T:Azure.Core.Cryptography.IKeyEncryptionKey" /> and
            <see cref="T:Azure.Core.Cryptography.IKeyEncryptionKeyResolver" />.
            </exception>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideEncryptionOptionsExtensions.Clone(Azure.Storage.ClientSideEncryptionOptions)">
            <summary>
            Extension method to clone an instance of <see cref="T:Azure.Storage.ClientSideEncryptionOptions" />.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideEncryptionOptionsExtensions.CopyOptions(Azure.Storage.ClientSideEncryptionOptions,Azure.Storage.ClientSideEncryptionOptions)">
            <summary>
            Copies all properties from one instance to another. It cannot copy
            <see cref="P:Azure.Storage.ClientSideEncryptionOptions.EncryptionVersion" />;
            that is the responsibility of the caller who made the instance.
            </summary>
            <param name="source">Object to copy from.</param>
            <param name="destination">Object to copy to.</param>
            <remarks>
            This functionality has been pulled out to be accessible by other
            clone methods available on subclasses. They need the ability to
            instantiate the subclass destination first before copying over the
            properties.
            </remarks>
        </member>
        <member name="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm">
            <summary>
            Specifies the encryption algorithm used to encrypt and decrypt a blob.
            </summary>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.AesCbc256">
            <summary>
            AES-CBC using a 256 bit key.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.AesGcm256">
            <summary>
            AES-GCM using a 256 bit key.
            </summary>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.op_Equality(Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm,Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.op_Inequality(Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm,Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.op_Implicit(System.String)~Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm">
            <summary>
            Converts a string to a <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.Equals(Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm" /> are equal
            </summary>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.ClientSideEncryptionAlgorithm.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Storage.Cryptography.Models.EncryptedRegionInfo">
            <summary>
            Describes the structure of authenticated encrypted blocks of data in a content stream.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptedRegionInfo.DataLength">
            <summary>
            Length of the ciphertext data in the region.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptedRegionInfo.NonceLength">
            <summary>
            Length of the nonce found in the content stream.
            </summary>
        </member>
        <member name="T:Azure.Storage.Cryptography.Models.EncryptionAgent">
            <summary>
            Represents the encryption agent stored on the service.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptionAgent.EncryptionVersion">
            <summary>
            The protocol version used for encryption.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptionAgent.EncryptionAlgorithm">
            <summary>
            The algorithm used for encryption.
            </summary>
        </member>
        <member name="T:Azure.Storage.Cryptography.Models.EncryptionData">
            <summary>
            Represents the encryption data that is stored on the service.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptionData.EncryptionMode">
            <summary>
            The blob encryption mode.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptionData.WrappedContentKey">
            <summary>
            A <see cref="T:Azure.Storage.Cryptography.Models.KeyEnvelope" /> object that stores the wrapping algorithm, key identifier and the encrypted key.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptionData.EncryptionAgent">
            <summary>
            The encryption agent.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptionData.ContentEncryptionIV">
            <summary>
            The content encryption IV. Only present for v1.0.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptionData.EncryptedRegionInfo">
            <summary>
            Information about structure of authenticated encryption blocks. Only present for v2.0.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.EncryptionData.KeyWrappingMetadata">
            <summary>
            Metadata for encryption. Currently used only for storing the encryption library, but may contain other data.
            </summary>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.EncryptionDataSerializer.Serialize(Azure.Storage.Cryptography.Models.EncryptionData)">
            <summary>
            Serializes an EncryptionData instance into JSON.
            </summary>
            <param name="data">Data to serialize.</param>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.EncryptionDataSerializer.WriteEncryptionData(System.Text.Json.Utf8JsonWriter,Azure.Storage.Cryptography.Models.EncryptionData)">
            <summary>
            Serializes an EncryptionData instance into JSON and writes it to the given JSON writer.
            </summary>
            <param name="json">The writer to write the serialization to.</param>
            <param name="data">Data to serialize.</param>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.EncryptionDataSerializer.Deserialize(System.String)">
            <summary>
            Deserializes an EncryptionData instance from JSON.
            </summary>
            <param name="serializedData">The serialized data string.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.EncryptionDataSerializer.DeserializeEncryptionData(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Reads an EncryptionData instance from a JSON reader.
            </summary>
            <param name="reader">The reader to parse an EncryptionData isntance from.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.Models.EncryptionDataSerializer.ReadEncryptionData(System.Text.Json.JsonElement)">
            <summary>
            Reads an EncryptionData instance from a parsed JSON object.
            </summary>
            <param name="root">The JSON object model.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:Azure.Storage.Cryptography.Models.KeyEnvelope">
            <summary>
            Represents the envelope key details JSON schema stored on the service.
            In the envelope technique, a securely generated content encryption key (CEK) is generated
            for every encryption operation. It is then encrypted (wrapped) with the user-provided key
            encryption key (KEK), using a key-wrap algorithm. The wrapped CEK is stored with the
            encrypted data, and needs the KEK to be unwrapped. The KEK and key-wrapping operation is
            never seen by this SDK.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.KeyEnvelope.KeyId">
            <summary>
            The key identifier string.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.KeyEnvelope.EncryptedKey">
            <summary>
            The encrypted content encryption key.
            In V2, the content encryption algorithm is wrapped in with the key,
            authenticating the selected decryption algorithm.
            </summary>
        </member>
        <member name="P:Azure.Storage.Cryptography.Models.KeyEnvelope.Algorithm">
            <summary>
            The algorithm used to wrap the content encryption key.
            </summary>
        </member>
        <member name="T:Azure.Storage.Cryptography.Models.TransformMode">
            <summary>
            Transformation mode for a given <see cref="T:Azure.Storage.Cryptography.IAuthenticatedCryptographicTransform" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Cryptography.Models.TransformMode.Encrypt">
            <summary>
            Encryption mode.
            </summary>
        </member>
        <member name="F:Azure.Storage.Cryptography.Models.TransformMode.Decrypt">
            <summary>
            Decryption mode.
            </summary>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideEncryptorV1_0.EncryptInternal(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Wraps the given read-stream in a CryptoStream and provides the metadata used to create
            that stream.
            </summary>
            <param name="plaintext">Stream to wrap.</param>
            <param name="async">Whether to wrap the content encryption key asynchronously.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The wrapped stream to read from and the encryption metadata for the wrapped stream.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideEncryptorV1_0.BufferedEncryptInternal(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Encrypts the given stream and provides the metadata used to encrypt. This method writes to a memory stream,
            optimized for known-size data that will already be buffered in memory.
            </summary>
            <param name="plaintext">Stream to encrypt.</param>
            <param name="async">Whether to wrap the content encryption key asynchronously.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The encrypted data and the encryption metadata for the wrapped stream.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideEncryptorV1_0.EncryptedOpenWriteInternal(System.Func{Azure.Storage.Cryptography.Models.EncryptionData,System.Boolean,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IO.Stream}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a crypto transform stream to write blob contents to.
            </summary>
            <param name="openWriteInternal">
            OpenWrite function that applies <see cref="T:Azure.Storage.Cryptography.Models.EncryptionAgent" /> to the operation.
            </param>
            <param name="async">
            Whether to perform the operation asynchronously.
            </param>
            <param name="cancellationToken">
            Cancellation token for the operation.
            </param>
            <returns>
            Content transform write stream and encryption metadata.
            </returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideEncryptorV2_0.EncryptInternal(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Wraps the given read-stream in a CryptoStream and provides the metadata used to create
            that stream.
            </summary>
            <param name="plaintext">Stream to wrap.</param>
            <param name="async">Whether to wrap the content encryption key asynchronously.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The wrapped stream to read from and the encryption metadata for the wrapped stream.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideEncryptorV2_0.BufferedEncryptInternal(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Encrypts the given stream and provides the metadata used to encrypt. This method writes to a memory stream,
            optimized for known-size data that will already be buffered in memory.
            </summary>
            <param name="plaintext">Stream to encrypt.</param>
            <param name="async">Whether to wrap the content encryption key asynchronously.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The encrypted data and the encryption metadata for the wrapped stream.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.ClientSideEncryptorV2_0.EncryptedOpenWriteInternal(System.Func{Azure.Storage.Cryptography.Models.EncryptionData,System.Boolean,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IO.Stream}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a crypto transform stream to write blob contents to.
            </summary>
            <param name="openWriteInternal">
            OpenWrite function that applies <see cref="T:Azure.Storage.Cryptography.Models.EncryptionAgent" /> to the operation.
            </param>
            <param name="async">
            Whether to perform the operation asynchronously.
            </param>
            <param name="cancellationToken">
            Cancellation token for the operation.
            </param>
            <returns>
            Content transform write stream and encryption metadata.
            </returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.GcmAuthenticatedCryptographicTransform.TransformAuthenticationBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Applies a GCM encryption or decryption to the <paramref name="input" />, decided by <see cref="P:Azure.Storage.Cryptography.GcmAuthenticatedCryptographicTransform.TransformMode" />,
            and writes the result to <paramref name="output" />.
            <para />
            An encrypted input or output contains the nonce, then ciphertext, then tag, while the unencrypted input or
            output only contains plaintext. Plaintext and ciphertext have equal length when using GCM, though the input
            and output will not, given one has the nonce and tag attached.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="output" /> is not large enough to contain the transformed result of <paramref name="input" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this instance's <see cref="P:Azure.Storage.Cryptography.GcmAuthenticatedCryptographicTransform.TransformMode" /> is invalid.
            </exception>
        </member>
        <member name="M:Azure.Storage.Cryptography.IAuthenticatedCryptographicTransform.TransformAuthenticationBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Apply this transform.
            </summary>
            <param name="input">
            Input data block to transform.
            </param>
            <param name="output">
            Span to write transformed contents to.
            </param>
            <returns>
            Number of bytes written to output.
            </returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.IClientSideEncryptor.ExpectedOutputContentLength(System.Int64)">
            <summary>
            Calculates the expected length of the output content.
            </summary>
            <param name="plaintextLength">
            Length of the plaintext to be encrypted
            </param>
            <returns>
            Length of output ciphertext plus any additional data in the content stream
            such as nonces or authentication tags.
            </returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.IClientSideEncryptor.EncryptInternal(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Wraps the given read-stream in a cryptographic transformation stream and provides
            the metadata used to create that stream.
            </summary>
            <param name="plaintext">Stream to wrap.</param>
            <param name="async">Whether to wrap the content encryption key asynchronously.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The wrapped stream to read from and the encryption metadata for the wrapped stream.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.IClientSideEncryptor.BufferedEncryptInternal(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Encrypts the given stream and provides the metadata used to encrypt.
            </summary>
            <param name="plaintext">Stream to encrypt.</param>
            <param name="async">Whether to wrap the content encryption key asynchronously.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The encrypted data and the encryption metadata for the wrapped stream.</returns>
        </member>
        <member name="M:Azure.Storage.Cryptography.IClientSideEncryptor.EncryptedOpenWriteInternal(System.Func{Azure.Storage.Cryptography.Models.EncryptionData,System.Boolean,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IO.Stream}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a cryptographic transformation stream to write plaintext contents to.
            </summary>
            <param name="openWriteInternal">
            OpenWrite function that applies <see cref="T:Azure.Storage.Cryptography.Models.EncryptionAgent" /> to the operation.
            </param>
            <param name="async">
            Whether to perform the operation asynchronously.
            </param>
            <param name="cancellationToken">
            Cancellation token for the operation.
            </param>
            <returns>
            Content transform write stream and encryption metadata.
            </returns>
        </member>
        <member name="F:Azure.Storage.Constants.MaxIdleTimeMs">
            <summary>
            The maximum allowed time between read or write calls to the stream for IdleCancellingStream.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultSasVersion">
            <summary>
            Gets the default service version to use when building shared access
            signatures.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultBufferSize">
            <summary>
            The default size of staged blocks when uploading small blobs.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.LargeBufferSize">
            <summary>
            The size of staged blocks when uploading large blobs.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.LargeUploadThreshold">
            <summary>
            The threshold where we switch from staging <see cref="F:Azure.Storage.Constants.DefaultBufferSize" />
            buffers to staging <see cref="F:Azure.Storage.Constants.LargeBufferSize" /> buffers.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultStreamingDownloadSize">
            <summary>
            The minimum number of bytes to download in Open Read.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultStreamCopyBufferSize">
            <summary>
            Different .NET implementations have different default sizes for <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" />
            and it's overloads. This is the default for .NET Core to be applied everywhere for test consistency.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultDownloadCopyBufferSize">
            <summary>
            The size of the buffer to use when copying streams during a
            download operation.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.BlockNameFormat">
            <summary>
            The default format we use for block names.  There are 50,000
            maximum blocks so we pad the size with up to 4 leading zeros.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.ConnectionStrings">
            <summary>
            Storage Connection String constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.ConnectionStrings.BlobEndpointPortNumber">
            <summary>
            The default port numbers for development storage credentials
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.HeaderNames">
            <summary>
            Header Name constant values.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.Blob">
            <summary>
            Blob constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Blob.Container.RootName">
            <summary>
            The Azure Storage name used to identify a storage account's root container.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Blob.Container.LogsName">
            <summary>
            The Azure Storage name used to identify a storage account's logs container.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Blob.Container.WebName">
            <summary>
            The Azure Storage name used to identify a storage account's web content container.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Blob.Lease.InfiniteLeaseDuration">
            <summary>
            Lease Duration is set as infinite when passed -1.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.File">
            <summary>
            File constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.File.Lease.InfiniteLeaseDuration">
            <summary>
            Lease Duration is set as infinite when passed -1.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.DataLake">
            <summary>
            Data Lake constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.BlobUriSuffix">
            <summary>
            The blob URI suffix.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.BlobUriPeriodSuffix">
            <summary>
            The blob URI suffix.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.DfsUriSuffix">
            <summary>
            The DFS URI suffix.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.DfsUriPeriodSuffix">
            <summary>
            The DFS URI suffix.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.ErrorKey">
            <summary>
            The key of the object json object returned for errors.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.ErrorCodeKey">
            <summary>
            The key of the error code returned for errors.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.ErrorMessageKey">
            <summary>
            The key of the error message returned for errors.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.AlreadyExists">
            <summary>
            The Azure Storage error codes for Datalake Client.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.DefaultConcurrentTransfersCount">
            <summary>
            Default concurrent transfers count.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.Pre_2019_12_12_MaxAppendBytes">
            <summary>
            Max upload bytes for less than Service Version 2019-12-12.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.MaxAppendBytes">
            <summary>
            Max upload bytes.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.IsDirectoryKey">
            <summary>
            Metadata key for isFolder property.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.Queue">
            <summary>
            Queue constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Queue.MaxMessagesDequeue">
            <summary>
            QueueMaxMessagesDequeue indicates the maximum number of messages
            you can retrieve with each call to Dequeue.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Queue.QueueMessageMaxBytes">
            <summary>
            QueueMessageMaxBytes indicates the maximum number of bytes allowed for a message's UTF-8 text.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.ChangeFeed">
            <summary>
            ChangeFeed constant values.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.QuickQuery">
            <summary>
            Quick Query constant values.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.Sas">
            <summary>
            Sas constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Sas.PathStylePorts">
            <summary>
            List of ports used for path style addressing.
            Copied from Microsoft.Azure.Storage.Core.Util
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.Xml">
            <summary>
            XML Element Name constant values.
            </summary>
        </member>
        <member name="T:Azure.Storage.Errors">
            <summary>
            Create exceptions for common error cases.
            </summary>
        </member>
        <member name="M:Azure.Storage.Errors.CryptographyAuthTagMismatch">
            <summary>
            From
            https://github.com/dotnet/runtime/blob/032a7dcbe1056493e8bab51e6b5b9503de727273/src/libraries/System.Security.Cryptography/src/Resources/Strings.resx#L202
            </summary>
            <returns></returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:Azure.Storage.Errors.CryptographyPlaintextCiphertextLengthMismatch">
            <summary>
            From
            https://github.com/dotnet/runtime/blob/032a7dcbe1056493e8bab51e6b5b9503de727273/src/libraries/System.Security.Cryptography/src/Resources/Strings.resx#L514
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Azure.Storage.Errors.CryptographyInvalidNonceLength">
            <summary>
            From
            https://github.com/dotnet/runtime/blob/032a7dcbe1056493e8bab51e6b5b9503de727273/src/libraries/System.Security.Cryptography/src/Resources/Strings.resx#L400
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Azure.Storage.Errors.CryptographyInvalidTagLength">
            <summary>
            From
            https://github.com/dotnet/runtime/blob/032a7dcbe1056493e8bab51e6b5b9503de727273/src/libraries/System.Security.Cryptography/src/Resources/Strings.resx#L418
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Azure.Storage.GeoRedundantReadPolicy">
            <summary>
            This policy is used if the SecondaryUri property is passed in on the clientOptions. It allows for storage
            accounts configured with RA-GRS to retry GET or HEAD requests against the secondary storage Uri.
            </summary>
        </member>
        <member name="P:Azure.Storage.SharedAccessSignatureCredentials.SasToken">
            <summary>
            Gets the SAS token used to authenticate requests to the Storage
            service.
            </summary>
        </member>
        <member name="M:Azure.Storage.SharedAccessSignatureCredentials.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Azure.Storage.SharedAccessSignatureCredentials" /> class.
            </summary>
            <param name="sasToken">
            The SAS token used to authenticate requests to the Storage service.
            </param>
        </member>
        <member name="T:Azure.Storage.Shared.StorageClientConfiguration">
            <summary>
            Parent class of the *ClientConfiguration classes.
            Contains common properties used to create clients.
            </summary>
        </member>
        <member name="M:Azure.Storage.Shared.StorageClientConfiguration.#ctor">
            <summary>
            Constructor for mocking.
            </summary>
        </member>
        <member name="T:Azure.Storage.Shared.ISupportsTenantIdChallenges">
            <summary>
            Options to be exposed in client options classes related to bearer token authorization challenge scenarios.
            </summary>
        </member>
        <member name="P:Azure.Storage.Shared.ISupportsTenantIdChallenges.EnableTenantDiscovery">
            <summary>
             Enables tenant discovery through the authorization challenge when the client is configured to use a TokenCredential.
            When enabled, the client will attempt an initial un-authorized request to prompt a challenge in order to discover the correct tenant for the resource.
            </summary>
        </member>
        <member name="T:Azure.Storage.StorageClientOptions">
            <summary>
            Defines the client configuration options for connecting to Azure
            Storage.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.Initialize(Azure.Core.ClientOptions)">
            <summary>
            Set common ClientOptions defaults for Azure Storage.
            </summary>
            <param name="options">Storage ClientOptions.</param>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.AsPolicy(Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Get an authentication policy to sign Storage requests.
            </summary>
            <param name="credential">Credential to use.</param>
            <returns>An authentication policy.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.AsPolicy``1(Azure.AzureSasCredential,System.Uri)">
            <summary>
            Get an authentication policy to sign Storage requests.
            </summary>
            <param name="credential">Credential to use.</param>
            <param name="resourceUri">Resource Uri. Must not contain shared access signature.</param>
            <returns>An authentication policy.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.AsPolicy(Azure.Core.TokenCredential,Azure.Core.ClientOptions)">
            <summary>
            Get an authentication policy to sign Storage requests.
            </summary>
            <param name="credential">Credential to use.</param>
            <param name="options"> The <see cref="T:Azure.Storage.Shared.ISupportsTenantIdChallenges" /> to apply to the credential. </param>
            <returns>An authentication policy.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.GetAuthenticationPolicy(System.Object,Azure.Core.ClientOptions)">
            <summary>
            Get an optional authentication policy to sign Storage requests.
            </summary>
            <param name="credentials">Optional credentials to use.</param>
            <param name="options"> The <see cref="T:Azure.Core.ClientOptions" /> </param>
            <returns>An optional authentication policy.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.Build(Azure.Core.ClientOptions,Azure.Core.Pipeline.HttpPipelinePolicy,System.Uri)">
            <summary>
            Create an HttpPipeline from Storage ClientOptions.
            </summary>
            <param name="options">The Storage ClientOptions.</param>
            <param name="authentication">Optional authentication policy.</param>
            <param name="geoRedundantSecondaryStorageUri">The secondary URI to be used for retries on failed read requests</param>
            <returns>An HttpPipeline to use for Storage requests.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.Build(Azure.Core.ClientOptions,System.Object,System.Uri)">
            <summary>
            Create an HttpPipeline from Storage ClientOptions.
            </summary>
            <param name="options">The Storage ClientOptions.</param>
            <param name="credentials">Optional authentication credentials.</param>
            <param name="geoRedundantSecondaryStorageUri">The secondary URI to be used for retries on failed read requests</param>
            <returns>An HttpPipeline to use for Storage requests.</returns>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.UseV1MD5">
            <summary>
            Gets or sets a value indicating whether the FISMA MD5 setting will be used.
            </summary>
            <value><c>false</c> to use the FISMA MD5 setting; <c>true</c> to use the .NET default implementation.</value>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.#ctor(System.Object,System.ValueTuple{System.Uri,System.Uri},System.ValueTuple{System.Uri,System.Uri},System.ValueTuple{System.Uri,System.Uri},System.ValueTuple{System.Uri,System.Uri})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.StorageConnectionString" /> class using the specified
            account credentials and service endpoints.
            </summary>
            <param name="storageCredentials">A StorageCredentials object.</param>
            <param name="blobStorageUri">A <see cref="T:System.Uri" /> specifying the Blob service endpoint or endpoints.</param>
            <param name="queueStorageUri">A <see cref="T:System.Uri" /> specifying the Queue service endpoint or endpoints.</param>
            <param name="tableStorageUri">A <see cref="T:System.Uri" /> specifying the Table service endpoint or endpoints.</param>
            <param name="fileStorageUri">A <see cref="T:System.Uri" /> specifying the File service endpoint or endpoints.</param>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.DevelopmentStorageAccount">
            <summary>
            Gets a <see cref="T:Azure.Storage.StorageConnectionString" /> object that references the well-known development storage account.
            </summary>
            <value>A <see cref="T:Azure.Storage.StorageConnectionString" /> object representing the development storage account.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.IsDevStoreAccount">
            <summary>
            Indicates whether this account is a development storage account.
            </summary>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.EndpointSuffix">
            <summary>
            The storage service hostname suffix set by the user, if any.
            </summary>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.Settings">
            <summary>
            The connection string parsed into settings.
            </summary>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.DefaultEndpoints">
            <summary>
            True if the user used a constructor that auto-generates endpoints.
            </summary>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.BlobEndpoint">
            <summary>
            Gets the primary endpoint for the Blob service, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the primary Blob service endpoint.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.QueueEndpoint">
            <summary>
            Gets the primary endpoint for the Queue service, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the primary Queue service endpoint.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.TableEndpoint">
            <summary>
            Gets the primary endpoint for the Table service, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the primary Table service endpoint.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.FileEndpoint">
            <summary>
            Gets the primary endpoint for the File service, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the primary File service endpoint.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.BlobStorageUri">
            <summary>
            Gets the endpoints for the Blob service at the primary and secondary location, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the Blob service endpoints.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.QueueStorageUri">
            <summary>
            Gets the endpoints for the Queue service at the primary and secondary location, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the Queue service endpoints.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.TableStorageUri">
            <summary>
            Gets the endpoints for the Table service at the primary and secondary location, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the Table service endpoints.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.FileStorageUri">
            <summary>
            Gets the endpoints for the File service at the primary and secondary location, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the File service endpoints.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.Credentials">
            <summary>
            Gets the credentials used to create this <see cref="T:Azure.Storage.StorageConnectionString" /> object.
            </summary>
            <value>A StorageCredentials object.</value>
        </member>
        <member name="F:Azure.Storage.StorageConnectionString._accountName">
            <summary>
            Private record of the account name for use in ToString(bool).
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.Parse(System.String)">
            <summary>
            Parses a connection string and returns a <see cref="T:Azure.Storage.StorageConnectionString" /> created
            from the connection string.
            </summary>
            <param name="connectionString">A valid connection string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="connectionString" /> is null or empty.</exception>
            <exception cref="T:System.FormatException">Thrown if <paramref name="connectionString" /> is not a valid connection string.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="connectionString" /> cannot be parsed.</exception>
            <returns>A <see cref="T:Azure.Storage.StorageConnectionString" /> object constructed from the values provided in the connection string.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.TryParse(System.String,Azure.Storage.StorageConnectionString@)">
            <summary>
            Indicates whether a connection string can be parsed to return a <see cref="T:Azure.Storage.StorageConnectionString" /> object.
            </summary>
            <param name="connectionString">The connection string to parse.</param>
            <param name="account">A <see cref="T:Azure.Storage.StorageConnectionString" /> object to hold the instance returned if
            the connection string can be parsed.</param>
            <returns><b>true</b> if the connection string was successfully parsed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ParseCore(System.String,Azure.Storage.StorageConnectionString@,System.Action{System.String})">
            <summary>
            Internal implementation of Parse/TryParse.
            </summary>
            <param name="connectionString">The string to parse.</param>
            <param name="accountInformation">The <see cref="T:Azure.Storage.StorageConnectionString" /> to return.</param>
            <param name="error">A callback for reporting errors.</param>
            <returns>If true, the parse was successful. Otherwise, false.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ConstructBlobEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the default blob endpoint using the specified protocol and account name.
            </summary>
            <param name="scheme">The protocol to use.</param>
            <param name="accountName">The name of the storage account.</param>
            <param name="endpointSuffix">The Endpoint DNS suffix; use <c>null</c> for default.</param>
            <param name="sasToken">The sas token; use <c>null</c> for default.</param>
            <returns>The default blob endpoint.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ConstructFileEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the default file endpoint using the specified protocol and account name.
            </summary>
            <param name="scheme">The protocol to use.</param>
            <param name="accountName">The name of the storage account.</param>
            <param name="endpointSuffix">The Endpoint DNS suffix; use <c>null</c> for default.</param>
            <param name="sasToken">The sas token; use <c>null</c> for default.</param>
            <returns>The default file endpoint.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ConstructQueueEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the default queue endpoint using the specified protocol and account name.
            </summary>
            <param name="scheme">The protocol to use.</param>
            <param name="accountName">The name of the storage account.</param>
            <param name="endpointSuffix">The Endpoint DNS suffix; use <c>null</c> for default.</param>
            <param name="sasToken">The sas token; use <c>null</c> for default.</param>
            <returns>The default queue endpoint.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ConstructTableEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the default queue endpoint using the specified protocol and account name.
            </summary>
            <param name="scheme">The protocol to use.</param>
            <param name="accountName">The name of the storage account.</param>
            <param name="endpointSuffix">The Endpoint DNS suffix; use <c>null</c> for default.</param>
            <param name="sasToken">The sas token; use <c>null</c> for default.</param>
            <returns>The default table endpoint.</returns>
        </member>
        <member name="T:Azure.Storage.StorageExceptionExtensions">
            <summary>
            Provide helpful information about errors calling Azure Storage endpoints.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageExceptionExtensions.GetErrorCode(Azure.Response,System.String)">
            <summary>
            Attempt to get the error code from a response if it's not provided.
            </summary>
            <param name="response">The response.</param>
            <param name="errorCode">An optional error code.</param>
            <returns>The response's error code.</returns>
        </member>
        <member name="M:Azure.Storage.StorageExceptionExtensions.IsUnavailable``1(Azure.Response{``0})">
            <summary>
            Check if a Response will throw an exception if you try to access
            its Value property.
            </summary>
            <typeparam name="T">Type of the Response Value.</typeparam>
            <param name="response">The response to check.</param>
            <returns>True if the response will throw.</returns>
        </member>
        <member name="M:Azure.Storage.StorageExceptionExtensions.AsNoBodyResponse``1(Azure.Response)">
            <summary>
            Create a response that will throw an exception if you try to access
            its Value property.
            </summary>
            <typeparam name="T">Type of the Response Value.</typeparam>
            <param name="rawResponse">The raw response.</param>
            <returns>A response that will throw if accessed.</returns>
        </member>
        <member name="T:Azure.Storage.StorageRequestValidationPipelinePolicy">
            <summary>
            Pipeline policy to verify x-ms-client-request-id and x-ms-client-return-request-id
            headers that are echoed back from a request match.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageRequestValidationPipelinePolicy.#ctor(Azure.Core.ClientOptions)">
            <summary>
            Create a new StorageRequestValidationPipelinePolicy
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageRequestValidationPipelinePolicy.OnReceivedResponse(Azure.Core.HttpMessage)">
            <summary>
            Verify x-ms-client-request-id and x-ms-client-return-request-id headers matches as
            x-ms-client-return-request-id is an echo of x-mis-client-request-id.
            </summary>
            <param name="message">The message that was sent</param>
        </member>
        <member name="T:Azure.Storage.StorageSharedKeyCredentialInternals">
            <summary>
            This class is added to access protected static methods off of the base class
            that should not be exposed directly to customers.
            </summary>
        </member>
        <member name="T:Azure.Storage.StorageSharedKeyPipelinePolicy">
            <summary>
            HttpPipelinePolicy to sign requests using an Azure Storage shared key.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageSharedKeyPipelinePolicy.#ctor(Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Create a new SharedKeyPipelinePolicy
            </summary>
            <param name="credentials">SharedKeyCredentials to authenticate requests.</param>
        </member>
        <member name="M:Azure.Storage.StorageSharedKeyPipelinePolicy.OnSendingRequest(Azure.Core.HttpMessage)">
            <summary>
            Sign the request using the shared key credentials.
            </summary>
            <param name="message">The message with the request to sign.</param>
        </member>
        <member name="P:Azure.Storage.StorageResponseClassifier.SecondaryStorageUri">
            <summary>
            The secondary URI to be used for retries on failed read requests
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageResponseClassifier.IsRetriableResponse(Azure.Core.HttpMessage)">
            <summary>
            Overridden version of IsRetriableResponse that allows for Storage specific retry logic.
            </summary>
            <param name="message">The message containing both Response and Request</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.StorageResponseClassifier.IsErrorResponse(Azure.Core.HttpMessage)">
            <summary>
            Specifies if the response contained in the <paramref name="message" /> is not successful.
            </summary>
        </member>
        <member name="T:Azure.Storage.StorageVersionExtensions">
            <summary>
            Helpers to manage Storage service versions.
            </summary>
        </member>
        <member name="F:Azure.Storage.StorageVersionExtensions.LatestVersion">
            <summary>
            Gets the latest version of the service supported by this SDK.
            </summary>
        </member>
        <member name="F:Azure.Storage.StorageVersionExtensions.MaxVersion">
            <summary>
            Gets the latest version of the service supported by this SDK.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageVersionExtensions.ToVersionString(Azure.Storage.Queues.QueueClientOptions.ServiceVersion)">
            <summary>
            Convert a Storage ServiceVersion enum to an x-ms-version string.
            </summary>
            <param name="version">The service version enum value.</param>
            <returns>The x-ms-version string.</returns>
        </member>
        <member name="T:Azure.Storage.UriExtensions">
            <summary>
            Extension methods used to manipulate URIs.
            </summary>
        </member>
        <member name="M:Azure.Storage.UriExtensions.AppendToPath(System.Uri,System.String)">
            <summary>
            Append a segment to a URIs path.
            </summary>
            <param name="uri">The URI.</param>
            <param name="segment">The relative segment to append.</param>
            <returns>The combined URI.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.GetQueryParameters(System.Uri)">
            <summary>
            Get the (already encoded) query parameters on a URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Dictionary mapping query parameters to values.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.GetAccountNameFromDomain(System.Uri,System.String)">
            <summary>
            Get the account name from the domain portion of a Uri.
            </summary>
            <param name="uri">The Uri.</param>
            <param name="serviceSubDomain">The service subdomain used to validate that the
            domain is in the expected format. This should be "blob" for blobs, "file" for files,
            "queue" for queues, "blob" and "dfs" for datalake.</param>
            <returns>Account name or null if not able to be parsed.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.GetAccountNameFromDomain(System.String,System.String)">
            <summary>
            Get the account name from the host.
            </summary>
            <param name="host">Host.</param>
            <param name="serviceSubDomain">The service subdomain used to validate that the
            domain is in the expected format. This should be "blob" for blobs, "file" for files,
            "queue" for queues, "blob" and "dfs" for datalake.</param>
            <returns>Account name or null if not able to be parsed.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.GetPath(System.Uri)">
            <summary>
            If path starts with a slash, remove it
            </summary>
            <param name="uri">The Uri.</param>
            <returns>Sanitized Uri.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.IsHostIPEndPointStyle(System.Uri)">
            <summary>
            Check to see if Uri is using IP Endpoint style.
            </summary>
            <param name="uri">The Uri.</param>
            <returns>True if using IP Endpoint style.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.AppendQueryParameter(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Appends a query parameter to the string builder.
            </summary>
            <param name="sb">string builder instance.</param>
            <param name="key">query parameter key.</param>
            <param name="value">query parameter value.</param>
        </member>
        <member name="M:Azure.Storage.UriQueryParamsCollection.#ctor(System.String)">
            <summary>
            Takes encoded query params string, output decoded params map
            </summary>
            <param name="encodedQueryParamString"></param>
        </member>
        <member name="T:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy">
            <summary>
            The storage authorization policy which supports challenges including tenantId discovery.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.#ctor(Azure.Core.TokenCredential,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <param name="credential"></param>
             <param name="scope"></param>
             <param name="enableTenantDiscovery"> </param>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.#ctor(Azure.Core.TokenCredential,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
             <summary>
            
             </summary>
             <param name="credential"></param>
             <param name="scopes"></param>
             <param name="enableTenantDiscovery"> </param>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.AuthorizeRequest(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.AuthorizeRequestAsync(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param><returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.AuthorizeRequestOnChallenge(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.AuthorizeRequestOnChallengeAsync(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.AuthorizationChallengeParser">
            <summary>
            A helper class for parsing Authorization challenge headers.
            </summary>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.GetChallengeParameterFromResponse(Azure.Response,System.String,System.String)">
            <summary>
            Parses the specified parameter from a challenge hearder found in the specified <see cref="T:Azure.Response" />.
            </summary>
            <param name="response">The <see cref="T:Azure.Response" /> to parse.</param>
            <param name="challengeScheme">The challenge scheme containing the <paramref name="challengeParameter" />. For example: "Bearer"</param>
            <param name="challengeParameter">The parameter key name containing the value to return.</param>
            <returns>The value of the parameter name specified in <paramref name="challengeParameter" /> if it is found in the specified <paramref name="challengeScheme" />.</returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Iterates through the challenge schemes present in a challenge header.
            </summary>
            <param name="headerValue">
            The header value which will be sliced to remove the first parsed <paramref name="challengeKey" />.
            </param>
            <param name="challengeKey">The parsed challenge scheme.</param>
            <returns>
            <c>true</c> if a challenge scheme was successfully parsed.
            The value of <paramref name="headerValue" /> should be passed to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)" /> to parse the challenge parameters if <c>true</c>.
            </returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)">
            <summary>
            Iterates through a challenge header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.
            </summary>
            <param name="headerValue">The header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.</param>
            <param name="paramKey">The parsed challenge parameter key.</param>
            <param name="paramValue">The parsed challenge parameter value.</param>
            <param name="separator">The challenge parameter key / value pair separator. The default is '='.</param>
            <returns>
            <c>true</c> if the next available challenge parameter was successfully parsed.
            <c>false</c> if there are no more parameters for the current challenge scheme or an additional challenge scheme was encountered in the <paramref name="headerValue" />.
            The value of <paramref name="headerValue" /> should be passed again to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" /> to attempt to parse any additional challenge schemes if <c>false</c>.
            </returns>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="M:Azure.Core.AzureSasCredentialSynchronousPolicy.#ctor(Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.AzureSasCredentialSynchronousPolicy" /> class.
            </summary>
            <param name="credential">The <see cref="T:Azure.Core.AzureSasCredentialSynchronousPolicy" /> used to authenticate requests.</param>
        </member>
        <member name="M:Azure.Core.AzureSasCredentialSynchronousPolicy.OnSendingRequest(Azure.Core.HttpMessage)">
            <summary>
            Method is invoked before the request is sent.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> containing the request.</param>
        </member>
        <member name="T:Azure.Core.ForwardsClientCallsAttribute">
            <summary>
            Marks methods that call methods on other client and don't need their diagnostics verified.
            </summary>
        </member>
        <member name="M:Azure.Core.ForwardsClientCallsAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.ForwardsClientCallsAttribute" />.
            </summary>
        </member>
        <member name="M:Azure.Core.ForwardsClientCallsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.ForwardsClientCallsAttribute" />.
            </summary>
            <param name="skipChecks"> Sets whether or not diagnostic scope validation should happen. </param>
        </member>
        <member name="P:Azure.Core.ForwardsClientCallsAttribute.SkipChecks">
            <summary>
            Gets whether or not we should validate DiagnosticScope for this API.
            In the case where there is an internal API that makes the Azure API call and a public API that uses it we need ForwardsClientCalls.
            If the public API will cache the results then the diagnostic scope will not always be created because an Azure API is not always called.
            In this case we need to turn off this validation for this API only.
            </summary>
        </member>
        <member name="T:Azure.Core.HashCodeBuilder">
            <summary>
            Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/HashCode.cs.
            </summary>
        </member>
        <member name="T:Azure.Core.SyncAsyncEventHandlerExtensions">
            <summary>
            Extensions for raising <see cref="T:Azure.Core.SyncAsyncEventHandler`1" />
            events.
            </summary>
        </member>
        <member name="M:Azure.Core.SyncAsyncEventHandlerExtensions.RaiseAsync``1(Azure.Core.SyncAsyncEventHandler{``0},``0,System.String,System.String,Azure.Core.Pipeline.ClientDiagnostics)">
            <summary>
            Raise an <see cref="T:Azure.Core.SyncAsyncEventHandler`1" />
            event by executing each of the handlers sequentially (to avoid
            introducing accidental parallelism in customer code) and collecting
            any exceptions.
            </summary>
            <typeparam name="T">Type of the event arguments.</typeparam>
            <param name="eventHandler">The event's delegate.</param>
            <param name="e">
            An <see cref="T:Azure.SyncAsyncEventArgs" /> instance that contains the
            event data.
            </param>
            <param name="declaringTypeName">
            The name of the type declaring the event to construct a helpful
            exception message and distributed tracing span.
            </param>
            <param name="eventName">
            The name of the event to construct a helpful exception message and
            distributed tracing span.
            </param>
            <param name="clientDiagnostics">
            Client diagnostics to wrap all the handlers in a new distributed
            tracing span.
            </param>
            <returns>
            A task that represents running all of the event's handlers.
            </returns>
            <exception cref="T:System.AggregateException">
            An exception was thrown during the execution of at least one of the
            event's handlers.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="e" />, <paramref name="declaringTypeName" />,
            <paramref name="eventName" />, or <paramref name="clientDiagnostics" />
            are null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="declaringTypeName" /> or
            <paramref name="eventName" /> are empty.
            </exception>
        </member>
        <member name="M:Azure.Core.Pipeline.StorageClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="M:Azure.Core.LowLevelPageableHelpers.BuildPageForResponse(Azure.Response,System.String,System.String)">
            <summary>
            Returns a <see cref="T:Azure.Page`1" /> for a given response.
            </summary>
            <param name="response"></param>
            <param name="itemPropertyName"></param>
            <param name="nextLinkPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Core.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.HasValue">
            <summary>
            Returns true if lock contains the cached value. Otherwise false.
            </summary>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.Value">
            <summary>
            Returns cached value if it was set when lock has been created. Throws exception otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value isn't set.</exception>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.LockOrValue.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException">Value is set already.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.Succeeded(Azure.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Succeeded(Azure.Response,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="value">The final result of the long-running operation.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation{`0},Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then use as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the property <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />
            property and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.DelayStrategy">
            <summary>
            Strategy to control delay behavior.
            </summary>
        </member>
        <member name="M:Azure.Core.DelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the interval of next delay iteration.
            </summary>
            <remarks> Note that the value could change per call. </remarks>
            <param name="response"> Server response. </param>
            <param name="suggestedInterval"> Suggested pollingInterval. It is up to strategy
            implementation to decide how to deal with this parameter. </param>
            <returns> Delay interval of next iteration. </returns>
        </member>
        <member name="T:Azure.Core.ConstantDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> with constant polling interval.
            </summary>
            <remarks>Polling interval is always equal to the given polling interval.</remarks>
        </member>
        <member name="M:Azure.Core.ConstantDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.ExponentialDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" />. Polling interval changes according to
            the sequence {1, 1, 1, 2, 4, ...32}.
            </summary>
            <remarks>Polling interval always follows the given sequence.</remarks>
        </member>
        <member name="M:Azure.Core.ExponentialDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from {1, 1, 1, 2, 4, ...32}.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
        </member>
        <member name="T:Azure.Core.RetryAfterDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> of which the interval is from
            retry-after header of service response.
            </summary>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.#ctor(Azure.Core.DelayStrategy)">
            <summary>
            Create a <see cref="T:Azure.Core.RetryAfterDelayStrategy" /> with a default retry-after value which normally
            comes from the initial response of an LRO operation.
            </summary>
            <param name="fallbackStrategy"> Fallback strategy if retry after is not present. </param>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of retry-after header of given service response and <paramref name="suggestedInterval" />.
            If retry-after header is not found, adopt the value of last retry-after header.
            </summary>
            <param name="response">Service response which might carry retry-after header.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of retry-after header and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Azure.QueueClientBuilderExtensions">
            <summary>
            Extension methods to add <see cref="T:Azure.Storage.Queues.QueueClientOptions" /> client to clients builder
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.QueueClientBuilderExtensions.AddQueueServiceClient``1(``0,System.String)">
            <summary>
            Registers a <see cref="T:Azure.Storage.Queues.QueueServiceClient" /> instance with the provided <paramref name="connectionString" />
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.QueueClientBuilderExtensions.AddQueueServiceClient``1(``0,System.Uri)">
            <summary>
            Registers a <see cref="T:Azure.Storage.Queues.QueueServiceClient" /> instance with the provided <paramref name="serviceUri" />
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.QueueClientBuilderExtensions.AddQueueServiceClient``1(``0,System.Uri,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Registers a <see cref="T:Azure.Storage.Queues.QueueServiceClient" /> instance with the provided <paramref name="serviceUri" /> and <paramref name="sharedKeyCredential" />
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.QueueClientBuilderExtensions.AddQueueServiceClient``2(``0,``1)">
            <summary>
            Registers a <see cref="T:Azure.Storage.Queues.QueueServiceClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
            </summary>
        </member>
        <member name="M:Azure.Core.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
